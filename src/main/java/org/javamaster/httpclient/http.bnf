{
  parserClass="org.javamaster.httpclient.parser.HttpParser"
  parserUtilClass="org.javamaster.httpclient.parser.HttpParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Http"
  psiImplClassSuffix="Impl"
  psiPackage="org.javamaster.httpclient.psi"
  psiImplPackage="org.javamaster.httpclient.psi.impl"

  elementTypeHolderClass="org.javamaster.httpclient.psi.HttpTypes"
  elementTypeClass="org.javamaster.httpclient.psi.HttpElementType"
  tokenTypeClass="org.javamaster.httpclient.psi.HttpTokenType"
  psiImplUtilClass="org.javamaster.httpclient.psi.impl.HttpPsiImplUtil"

  tokens=[
    LINE_COMMENT='regexp://.*'
    REQUEST_COMMENT='regexp:###.*'

    HTTP='http'
    HTTPS='https'
    SCHEMA_SEPARATE='://'
    COLON=':'

    SLASH='/'
    QUESTION='?'
    EQUALS='='
    AND='&'
    HASH='#'

    OUTPUT_SIGN='>'
    OUTPUT_FILE_SIGN='>>'
    START_SCRIPT_BRACE='> {%'
    END_SCRIPT_BRACE='%}'
  ]
}

httpFile ::= request_block*
request_block ::= request
request ::= method requestTarget headerField* requestMessagesGroup? responseHandler? {
    methods = [
        getContentType
        getContentTypeBoundary
        getContentLength
        getHttpVersion
        getHttpHost
    ]
}

method ::= REQUEST_METHOD {
    mixin = "org.javamaster.httpclient.psi.impl.HttpMethodBase"
}

requestTarget ::= schema SCHEMA_SEPARATE host port? pathAbsolute? (QUESTION query)? (HASH fragment)? version? {
    methods = [
        getHttpUrl
        getReferences
    ]
}
schema ::= SCHEMA_PART
host ::= HOST_VALUE
port ::= COLON PORT_SEGMENT
pathAbsolute ::= (SLASH SEGMENT)+
query ::= queryParameter (AND queryParameter)*
queryParameter ::= QueryParameterKey EQUALS QueryParameterValue?
QueryParameterKey ::= QUERY_NAME
QueryParameterValue ::= QUERY_VALUE
fragment ::= FRAGMENT_PART
version ::= HTTP_VERSION

headerField ::= headerFieldName COLON headerFieldValue? {
    methods = [
        getName
        getValue
    ]
}
headerFieldName ::= FIELD_NAME
headerFieldValue ::= FIELD_VALUE {
    methods = [
        getReferences
    ]
}

requestMessagesGroup ::= inputFile | messageBody
messageBody ::= exMessageBody {
    mixin="org.javamaster.httpclient.inject.HttpPsiLanguageInjectionHost"
}
external exMessageBody ::= message_text
inputFile ::= filePath
filePath ::= OUTPUT_FILE_PATH_PART {
    methods = [
        getReferences
    ]
}

responseHandler ::= responseScript {
    methods = [
        getResponseScriptHolder
    ]
}
responseScript ::= START_SCRIPT_BRACE scriptBody END_SCRIPT_BRACE
scriptBody ::= exScriptBody {
  mixin="org.javamaster.httpclient.inject.HttpPsiLanguageInjectionHost"
}
external exScriptBody ::= script_body