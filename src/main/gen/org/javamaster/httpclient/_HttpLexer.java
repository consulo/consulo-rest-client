// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _HttpLexer.flex

package org.javamaster.httpclient;

import com.intellij.psi.tree.IElementType;
import org.javamaster.httpclient.utils.LexerUtils;
import static org.javamaster.httpclient.utils.LexerUtils.*;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.javamaster.httpclient.psi.HttpTypes.*;



public class _HttpLexer implements com.intellij.lexer.FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_GLOBAL_SCRIPT = 2;
  public static final int IN_GLOBAL_SCRIPT_END = 4;
  public static final int IN_PRE_SCRIPT = 6;
  public static final int IN_PRE_SCRIPT_END = 8;
  public static final int IN_DIRECTION_COMMENT = 10;
  public static final int IN_FIRST_LINE = 12;
  public static final int IN_HOST = 14;
  public static final int IN_PORT = 16;
  public static final int IN_QUERY = 18;
  public static final int IN_FRAGMENT = 20;
  public static final int IN_BODY = 22;
  public static final int IN_TRIM_PREFIX_SPACE = 24;
  public static final int IN_PATH = 26;
  public static final int IN_HEADER = 28;
  public static final int IN_HEADER_FIELD_NAME = 30;
  public static final int IN_HEADER_FIELD_VALUE = 32;
  public static final int IN_HEADER_FIELD_VALUE_NO_SPACE = 34;
  public static final int IN_POST_SCRIPT = 36;
  public static final int IN_POST_SCRIPT_END = 38;
  public static final int IN_INPUT_FILE_PATH = 40;
  public static final int IN_OUTPUT_FILE = 42;
  public static final int IN_OUTPUT_FILE_PATH = 44;
  public static final int IN_VERSION = 46;
  public static final int IN_MULTIPART = 48;
  public static final int IN_VARIABLE = 50;
  public static final int IN_DINAMIC_VARIABLE = 52;
  public static final int IN_GLOBAL_VARIABLE = 54;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\6"+
    "\1\0\1\7\1\10\1\11\1\12\3\0\1\13\2\0"+
    "\1\14\1\15\1\16\12\17\1\20\1\0\1\21\1\22"+
    "\1\23\1\24\1\25\7\26\1\27\7\26\1\30\3\26"+
    "\1\31\6\26\4\0\1\32\1\0\1\33\1\34\1\33"+
    "\1\35\3\33\1\36\6\33\1\37\1\40\2\33\1\41"+
    "\1\42\1\43\1\33\1\44\3\33\1\45\1\0\1\46"+
    "\7\0\1\3\32\0\1\1\u01df\0\1\1\177\0\13\1"+
    "\35\0\2\3\5\0\1\1\57\0\1\1\240\0\1\1"+
    "\377\0\u0100\47";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\17\0\1\2\1\1\3\2\1\3\1\4"+
    "\3\5\1\6\1\2\1\5\1\7\2\6\1\10\1\7"+
    "\2\11\1\1\5\2\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\2\2\24\12\25"+
    "\2\26\1\27\1\30\1\0\1\31\2\32\1\31\1\33"+
    "\1\34\3\35\1\5\2\36\5\5\1\2\1\37\1\32"+
    "\1\37\1\1\1\37\3\40\1\41\1\6\1\41\1\1"+
    "\1\41\4\2\1\42\1\43\1\2\3\44\1\2\6\0"+
    "\1\45\2\5\1\0\1\46\2\7\3\0\1\47\1\50"+
    "\1\51\2\24\1\25\4\0\1\25\2\0\2\25\1\52"+
    "\2\0\1\53\1\54\2\5\1\55\1\5\1\56\2\37"+
    "\1\0\2\41\1\0\1\57\2\0\1\60\2\44\1\61"+
    "\1\62\1\0\1\63\1\0\3\64\2\0\1\5\1\65"+
    "\1\7\1\66\2\0\1\47\1\24\4\0\1\25\1\0"+
    "\1\67\1\25\2\70\2\0\1\71\2\5\1\37\1\72"+
    "\1\41\1\73\1\0\1\74\1\44\2\75\3\0\1\7"+
    "\1\0\1\24\1\0\1\76\3\77\1\0\1\67\1\25"+
    "\1\70\1\0\1\5\1\0\1\37\1\41\1\0\1\74"+
    "\1\44\2\63\1\100\1\0\1\76\1\0\1\101\1\102"+
    "\1\0\1\103\1\104\2\0\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"+
    "\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230\0\u0258"+
    "\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\u0348\0\u0370\0\u0398"+
    "\0\u03c0\0\u03e8\0\u0410\0\u0438\0\u0460\0\u0488\0\u04b0\0\u04d8"+
    "\0\u0500\0\u0460\0\u0528\0\u0550\0\u0578\0\u05a0\0\u05c8\0\u05f0"+
    "\0\u0618\0\u0640\0\u0460\0\u0668\0\u0690\0\u06b8\0\u0460\0\u06e0"+
    "\0\u0708\0\u0730\0\u0758\0\u0780\0\u07a8\0\u07d0\0\u07f8\0\u0460"+
    "\0\u0820\0\u04d8\0\u0460\0\u0460\0\u0848\0\u0870\0\u0460\0\u0460"+
    "\0\u0898\0\u08c0\0\u08e8\0\u0910\0\u0938\0\u0960\0\u0988\0\u09b0"+
    "\0\u09d8\0\u0a00\0\u0a28\0\u0a50\0\u0a78\0\u0460\0\u04d8\0\u0aa0"+
    "\0\u0460\0\u0ac8\0\u0460\0\u0460\0\u0af0\0\u04d8\0\u0b18\0\u0460"+
    "\0\u0460\0\u04d8\0\u0b40\0\u0b68\0\u0460\0\u0b90\0\u0bb8\0\u0be0"+
    "\0\u0c08\0\u0c30\0\u0c58\0\u0c80\0\u0ca8\0\u0cd0\0\u0cf8\0\u0d20"+
    "\0\u0d48\0\u0460\0\u04d8\0\u0d70\0\u0d98\0\u0dc0\0\u0de8\0\u0e10"+
    "\0\u0e38\0\u0e60\0\u0e88\0\u0eb0\0\u0ed8\0\u0460\0\u0f00\0\u0f28"+
    "\0\u0f50\0\u0f78\0\u0fa0\0\u0fc8\0\u0ff0\0\u1018\0\u1040\0\u1068"+
    "\0\u1090\0\u10b8\0\u0460\0\u10e0\0\u1108\0\u1130\0\u0460\0\u1158"+
    "\0\u1180\0\u11a8\0\u11d0\0\u11f8\0\u1220\0\u0460\0\u0460\0\u1248"+
    "\0\u1270\0\u1298\0\u12c0\0\u12e8\0\u1310\0\u1338\0\u1360\0\u1388"+
    "\0\u13b0\0\u13d8\0\u1400\0\u0460\0\u1428\0\u1450\0\u0460\0\u0460"+
    "\0\u1478\0\u14a0\0\u14c8\0\u14f0\0\u1518\0\u1540\0\u1568\0\u1590"+
    "\0\u15b8\0\u15e0\0\u1608\0\u0460\0\u1630\0\u1658\0\u0460\0\u1680"+
    "\0\u16a8\0\u0460\0\u0460\0\u16d0\0\u1040\0\u16f8\0\u0460\0\u1068"+
    "\0\u1720\0\u1748\0\u1770\0\u1798\0\u17c0\0\u17e8\0\u0460\0\u1810"+
    "\0\u1838\0\u0460\0\u1860\0\u1888\0\u18b0\0\u18d8\0\u1900\0\u1928"+
    "\0\u1950\0\u1978\0\u19a0\0\u0460\0\u19c8\0\u19f0\0\u1a18\0\u0460"+
    "\0\u1a40\0\u1a68\0\u1a90\0\u0460\0\u1ab8\0\u0460\0\u1ae0\0\u1b08"+
    "\0\u1b30\0\u0460\0\u1b58\0\u1b80\0\u1ba8\0\u1bd0\0\u1bf8\0\u1c20"+
    "\0\u1c48\0\u1c70\0\u1c98\0\u0460\0\u18d8\0\u1cc0\0\u1ce8\0\u1d10"+
    "\0\u1d38\0\u19f0\0\u1d60\0\u1d88\0\u1db0\0\u1dd8\0\u1e00\0\u1e28"+
    "\0\u1e50\0\u1e78\0\u0460\0\u1ea0\0\u1ec8\0\u1ef0\0\u1f18\0\u1f40"+
    "\0\u1f68\0\u1f90\0\u1fb8\0\u1fe0\0\u2008\0\u2030\0\u2058\0\u2058";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\35\5\36\1\35\1\37\6\35\1\40\2\35\1\41"+
    "\3\35\1\42\4\43\16\35\11\44\1\45\4\44\1\46"+
    "\31\44\1\35\5\47\3\35\1\50\4\35\1\40\31\35"+
    "\11\44\1\51\4\44\1\46\31\44\11\35\1\50\4\35"+
    "\1\40\31\35\2\52\1\53\1\52\1\54\1\55\10\52"+
    "\1\56\31\52\2\35\2\57\1\60\1\61\10\35\1\40"+
    "\1\35\1\62\14\35\1\63\1\64\5\35\1\65\1\66"+
    "\4\35\2\57\1\60\1\67\1\35\1\70\4\35\2\71"+
    "\1\72\1\71\1\73\3\35\1\74\1\35\4\71\1\35"+
    "\12\71\1\66\4\35\2\57\1\60\1\67\10\35\1\40"+
    "\1\75\30\35\1\76\1\35\2\57\1\60\1\67\1\76"+
    "\1\70\2\76\1\77\3\76\1\40\3\76\1\100\22\76"+
    "\1\101\2\76\1\102\1\35\2\57\1\60\1\67\10\102"+
    "\1\103\31\102\1\104\1\105\1\106\1\107\1\106\1\110"+
    "\1\104\1\111\4\104\1\112\1\104\1\113\2\104\1\114"+
    "\1\104\1\115\24\104\1\116\5\36\10\116\1\117\31\116"+
    "\1\120\1\0\2\57\1\60\1\67\1\120\1\70\6\120"+
    "\1\121\5\120\1\74\20\120\1\122\2\120\2\123\1\124"+
    "\1\123\1\125\11\123\1\126\31\123\5\35\1\61\6\35"+
    "\1\127\1\35\1\40\1\127\1\130\5\35\4\127\1\35"+
    "\12\127\3\35\2\131\1\57\1\131\1\60\1\61\10\131"+
    "\1\132\26\131\1\133\2\131\2\134\1\135\1\134\1\136"+
    "\1\137\10\134\1\140\26\134\1\141\2\134\11\44\1\142"+
    "\4\44\1\46\4\44\1\143\24\44\11\35\1\144\4\35"+
    "\1\40\31\35\2\145\1\146\1\147\1\146\1\150\10\145"+
    "\1\151\2\145\1\35\1\145\1\35\21\145\2\35\1\145"+
    "\1\152\5\47\10\152\1\153\4\152\1\154\24\152\2\155"+
    "\1\156\1\157\1\156\1\160\10\155\1\161\2\155\1\35"+
    "\1\155\1\162\21\155\1\163\1\35\1\155\2\35\2\57"+
    "\1\60\1\61\10\35\1\40\10\35\1\164\34\35\1\165"+
    "\1\35\1\40\36\35\1\61\2\35\1\166\3\35\2\167"+
    "\1\40\1\167\6\35\17\167\1\35\1\170\6\35\1\61"+
    "\6\35\2\167\1\40\1\167\6\35\17\167\1\35\1\170"+
    "\1\35\2\171\1\156\1\172\1\156\1\160\10\171\1\173"+
    "\3\171\1\100\22\171\1\174\1\35\1\171\51\0\5\36"+
    "\47\0\1\175\1\0\1\176\53\0\1\177\2\0\1\200"+
    "\36\0\1\201\1\202\67\0\4\43\16\0\11\44\1\0"+
    "\36\44\46\0\1\203\1\0\11\44\1\0\1\44\1\204"+
    "\2\44\1\205\31\44\1\0\5\47\110\0\1\206\47\0"+
    "\1\207\1\0\2\52\1\0\1\52\2\0\42\52\2\0"+
    "\1\53\52\0\1\55\42\0\2\52\1\0\1\52\2\0"+
    "\5\52\1\210\2\52\1\211\31\52\2\0\1\57\52\0"+
    "\1\61\60\0\1\212\74\0\1\213\46\0\1\214\46\0"+
    "\1\215\53\0\1\216\7\0\1\67\56\0\2\71\1\0"+
    "\1\71\6\0\4\71\1\0\12\71\22\0\1\75\30\0"+
    "\1\76\5\0\1\76\1\0\2\76\1\0\3\76\1\0"+
    "\3\76\1\0\22\76\1\0\2\76\45\0\1\217\2\0"+
    "\1\102\5\0\43\102\5\0\5\102\1\220\2\102\1\221"+
    "\31\102\2\104\1\0\1\104\1\0\2\104\1\0\4\104"+
    "\1\0\4\104\1\0\1\104\1\0\25\104\1\105\1\222"+
    "\1\105\1\222\1\105\1\104\1\0\4\104\1\0\4\104"+
    "\1\0\1\104\1\0\24\104\1\0\1\222\3\106\1\222"+
    "\1\0\1\223\4\0\1\224\1\0\1\225\4\0\1\226"+
    "\24\0\1\104\1\105\1\106\1\107\1\106\1\105\1\104"+
    "\1\223\4\104\1\224\1\104\1\227\2\104\1\0\1\104"+
    "\1\226\25\104\1\105\1\106\1\107\1\106\1\110\1\104"+
    "\1\0\4\104\1\0\4\104\1\0\1\104\1\0\24\104"+
    "\7\0\1\230\54\0\1\231\33\0\2\104\1\0\1\104"+
    "\1\0\2\104\1\0\3\104\1\232\1\0\1\104\1\233"+
    "\2\104\1\0\1\104\1\0\24\104\5\0\1\234\47\0"+
    "\1\235\15\0\1\236\24\0\1\120\5\0\1\120\1\0"+
    "\6\120\1\0\5\120\1\0\20\120\1\0\2\120\45\0"+
    "\1\237\4\0\1\124\61\0\1\127\2\0\1\127\6\0"+
    "\4\127\1\0\12\127\50\0\1\240\2\0\2\134\1\0"+
    "\1\134\2\0\37\134\1\0\2\134\2\0\1\135\47\0"+
    "\2\135\1\136\1\137\42\0\2\134\1\0\1\134\2\0"+
    "\5\134\1\241\2\134\1\242\26\134\1\0\2\134\45\0"+
    "\1\135\50\0\1\243\1\0\5\44\1\244\3\44\1\0"+
    "\36\44\46\0\1\245\1\0\2\145\1\0\1\145\2\0"+
    "\13\145\1\0\1\145\1\0\21\145\2\0\1\145\2\0"+
    "\3\146\43\0\2\145\1\146\1\147\1\146\1\0\13\145"+
    "\1\0\1\145\1\0\21\145\2\0\1\145\2\0\3\146"+
    "\1\150\42\0\2\145\1\0\1\145\2\0\5\145\1\246"+
    "\2\145\1\247\2\145\1\0\1\145\1\0\21\145\2\0"+
    "\1\145\23\0\1\250\24\0\2\155\1\0\1\155\2\0"+
    "\13\155\1\0\1\155\1\0\21\155\2\0\1\155\2\0"+
    "\3\156\43\0\2\155\1\156\1\157\1\156\1\0\13\155"+
    "\1\0\1\155\1\0\21\155\2\0\1\155\2\0\3\156"+
    "\1\160\42\0\2\155\1\0\1\155\2\0\5\155\1\251"+
    "\2\155\1\252\2\155\1\0\1\155\1\0\21\155\2\0"+
    "\1\155\23\0\1\253\71\0\1\254\33\0\1\255\32\0"+
    "\1\256\47\0\2\167\1\0\1\167\6\0\17\167\51\0"+
    "\1\257\1\0\2\171\1\0\1\171\2\0\14\171\1\0"+
    "\22\171\2\0\3\171\1\156\1\172\1\156\1\0\14\171"+
    "\1\0\22\171\2\0\3\171\1\0\1\171\2\0\5\171"+
    "\1\260\2\171\1\261\3\171\1\0\22\171\2\0\1\171"+
    "\45\0\1\262\27\0\1\263\31\0\1\264\40\0\2\177"+
    "\3\265\6\177\1\266\34\177\2\200\1\267\1\270\1\271"+
    "\43\200\45\0\1\272\7\0\1\273\42\0\11\204\1\177"+
    "\1\204\1\274\34\204\2\205\1\44\1\205\1\44\4\205"+
    "\1\200\36\205\2\0\3\275\1\206\42\0\2\210\1\265"+
    "\1\210\1\265\1\177\5\210\1\276\34\210\2\211\1\267"+
    "\1\211\1\271\1\200\42\211\16\0\1\277\65\0\1\300"+
    "\55\0\1\301\46\0\1\302\6\0\1\220\1\177\3\265"+
    "\1\177\5\220\1\303\34\220\1\221\1\200\1\267\1\270"+
    "\1\271\1\200\42\221\1\0\5\222\51\0\1\304\54\0"+
    "\1\305\51\0\1\306\36\0\1\307\15\0\1\236\24\0"+
    "\2\104\1\0\1\104\1\0\2\104\1\0\4\104\1\0"+
    "\1\104\1\310\2\104\1\0\1\104\1\0\24\104\7\0"+
    "\1\311\54\0\1\312\2\0\1\312\6\0\4\312\1\0"+
    "\12\312\3\0\2\232\1\265\1\232\1\265\2\232\1\177"+
    "\3\232\1\313\1\177\4\232\1\177\1\232\1\177\24\232"+
    "\2\233\1\314\1\233\1\315\2\233\1\316\4\233\1\316"+
    "\4\233\1\316\1\233\1\316\24\233\45\0\1\317\7\0"+
    "\1\320\42\0\2\241\1\265\1\241\1\265\1\177\5\241"+
    "\1\321\31\241\1\177\2\241\2\242\1\267\1\242\1\271"+
    "\1\200\37\242\1\200\2\242\1\0\5\243\42\0\11\44"+
    "\1\0\33\44\1\322\2\44\1\0\5\245\42\0\2\246"+
    "\1\265\1\246\1\265\1\177\5\246\1\323\5\246\1\177"+
    "\1\246\1\177\21\246\2\177\1\246\2\247\1\267\1\247"+
    "\1\271\1\200\13\247\1\200\1\247\1\200\21\247\2\200"+
    "\1\247\5\0\1\324\42\0\2\251\1\265\1\251\1\265"+
    "\1\177\5\251\1\325\5\251\1\177\1\251\1\177\21\251"+
    "\2\177\1\251\2\252\1\267\1\252\1\271\1\200\13\252"+
    "\1\200\1\252\1\200\21\252\2\200\1\252\5\0\1\326"+
    "\73\0\1\327\32\0\1\330\2\0\1\330\6\0\4\330"+
    "\1\0\12\330\3\0\2\260\1\265\1\260\1\265\1\177"+
    "\5\260\1\331\6\260\1\177\22\260\2\177\1\260\2\261"+
    "\1\267\1\261\1\271\1\200\14\261\1\200\22\261\2\200"+
    "\1\261\2\264\2\332\1\333\42\264\1\0\2\177\3\265"+
    "\6\177\1\266\2\177\1\334\31\177\2\0\1\267\56\0"+
    "\1\335\103\0\1\336\2\0\11\204\1\177\1\204\1\274"+
    "\2\204\1\44\31\204\2\0\3\275\43\0\2\210\1\265"+
    "\1\210\1\265\1\177\5\210\1\276\2\210\1\337\31\210"+
    "\34\0\1\340\53\0\1\215\7\0\1\220\1\177\3\265"+
    "\1\177\5\220\1\303\2\220\1\341\31\220\7\0\1\342"+
    "\54\0\1\343\2\0\1\343\6\0\4\343\1\0\12\343"+
    "\3\0\2\306\1\344\1\345\1\346\43\306\45\0\1\347"+
    "\2\0\2\310\1\344\1\310\1\346\2\310\1\306\4\310"+
    "\1\306\4\310\1\306\1\310\1\306\24\310\2\311\2\314"+
    "\1\315\42\311\2\0\5\350\6\0\1\312\2\0\1\312"+
    "\6\0\4\312\1\0\12\312\3\0\2\232\1\265\1\232"+
    "\1\265\2\232\1\177\3\232\1\313\1\177\1\232\1\351"+
    "\2\232\1\177\1\232\1\177\24\232\2\0\1\314\45\0"+
    "\2\316\1\314\1\352\1\315\43\316\11\0\1\353\36\0"+
    "\2\241\1\265\1\241\1\265\1\177\5\241\1\321\2\241"+
    "\1\354\26\241\1\177\2\241\11\44\1\355\36\44\2\246"+
    "\1\265\1\246\1\265\1\177\5\246\1\323\2\246\1\356"+
    "\2\246\1\177\1\246\1\177\21\246\2\177\1\246\2\251"+
    "\1\265\1\251\1\265\1\177\5\251\1\325\2\251\1\357"+
    "\2\251\1\177\1\251\1\177\21\251\2\177\1\251\30\0"+
    "\1\360\20\0\5\361\6\0\1\330\2\0\1\330\6\0"+
    "\4\330\1\0\12\330\3\0\2\260\1\265\1\260\1\265"+
    "\1\177\5\260\1\331\2\260\1\362\3\260\1\177\22\260"+
    "\2\177\1\260\2\0\1\332\47\0\2\363\1\364\45\0"+
    "\3\365\1\335\53\0\1\366\36\0\2\52\1\363\1\52"+
    "\1\364\1\0\42\52\37\0\1\302\10\0\1\102\1\0"+
    "\2\363\1\364\1\0\42\102\2\342\2\344\1\346\42\342"+
    "\2\0\5\367\6\0\1\343\2\0\1\343\6\0\4\343"+
    "\1\0\12\343\5\0\1\344\56\0\1\370\37\0\5\350"+
    "\42\0\2\104\1\363\1\104\1\364\2\104\1\0\4\104"+
    "\1\0\4\104\1\0\1\104\1\0\24\104\2\0\3\371"+
    "\1\353\42\0\2\134\1\363\1\134\1\364\1\0\37\134"+
    "\1\0\2\134\2\0\3\372\1\355\42\0\2\145\1\363"+
    "\1\145\1\364\1\0\13\145\1\0\1\145\1\0\21\145"+
    "\2\0\1\145\2\155\1\363\1\155\1\364\1\0\13\155"+
    "\1\0\1\155\1\0\21\155\2\0\1\155\16\0\1\373"+
    "\32\0\5\361\42\0\2\171\1\363\1\171\1\364\1\0"+
    "\14\171\1\0\22\171\2\0\1\171\2\0\1\363\47\0"+
    "\3\365\45\0\3\374\1\366\43\0\5\367\44\0\3\375"+
    "\1\370\44\0\3\371\45\0\3\372\62\0\1\376\32\0"+
    "\3\374\45\0\3\375\60\0\1\377\1\0\1\376\47\0"+
    "\1\u0100\30\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[8320];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\1\1\17\0\1\11\4\1\1\11\10\1\1\11"+
    "\3\1\1\11\10\1\1\11\2\1\2\11\2\1\2\11"+
    "\15\1\1\11\2\1\1\11\1\0\2\11\3\1\2\11"+
    "\3\1\1\11\14\1\1\11\13\1\1\11\6\1\6\0"+
    "\1\11\2\1\1\0\1\11\2\1\3\0\1\1\2\11"+
    "\3\1\4\0\1\1\2\0\2\1\1\11\2\0\2\11"+
    "\7\1\1\0\2\1\1\0\1\11\2\0\1\11\2\1"+
    "\2\11\1\0\1\1\1\0\1\11\2\1\2\0\3\1"+
    "\1\11\2\0\1\11\1\1\4\0\1\1\1\0\2\1"+
    "\1\11\1\1\2\0\1\11\3\1\1\11\1\1\1\11"+
    "\1\0\2\1\1\11\1\1\3\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\2\1\1\0\3\1\1\0\1\1"+
    "\1\0\2\1\1\0\2\1\1\11\2\1\1\0\1\1"+
    "\1\0\2\1\1\0\2\1\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
        private boolean nameFlag;
        private int nextState;

        public int matchTimes;
        public CharSequence lastMatch;

        public _HttpLexer() {
          this((java.io.Reader)null);
        }

        private static String zzToPrintable(CharSequence str) {
          return zzToPrintable(str.toString());
        }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _HttpLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case IN_BODY: {
              nextState = YYINITIAL; yypushback(yylength()); yybegin(IN_TRIM_PREFIX_SPACE); return detectBodyType(this);
            }  // fall though
            case 257: break;
            case IN_HEADER_FIELD_VALUE: {
              yybegin(YYINITIAL); return FIELD_VALUE;
            }  // fall though
            case 258: break;
            case IN_HEADER_FIELD_VALUE_NO_SPACE: {
              yybegin(YYINITIAL); return FIELD_VALUE;
            }  // fall though
            case 259: break;
            case IN_POST_SCRIPT: {
              yybegin(YYINITIAL); return SCRIPT_BODY_PAET;
            }  // fall though
            case 260: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return WHITE_SPACE;
            }
          // fall through
          case 70: break;
          case 2:
            { return BAD_CHARACTER;
            }
          // fall through
          case 71: break;
          case 3:
            { nameFlag = true; yybegin(IN_GLOBAL_VARIABLE); return AT;
            }
          // fall through
          case 72: break;
          case 4:
            { yybegin(IN_FIRST_LINE); return REQUEST_METHOD;
            }
          // fall through
          case 73: break;
          case 5:
            { 
            }
          // fall through
          case 74: break;
          case 6:
            { yybegin(YYINITIAL); return WHITE_SPACE;
            }
          // fall through
          case 75: break;
          case 7:
            { if(nameFlag) return DIRECTION_NAME_PART; else return DIRECTION_VALUE_PART;
            }
          // fall through
          case 76: break;
          case 8:
            { nameFlag = false; return WHITE_SPACE;
            }
          // fall through
          case 77: break;
          case 9:
            { yybegin(IN_HEADER); return WHITE_SPACE;
            }
          // fall through
          case 78: break;
          case 10:
            { yybegin(IN_VERSION); return WHITE_SPACE;
            }
          // fall through
          case 79: break;
          case 11:
            { yybegin(IN_FRAGMENT); return HASH;
            }
          // fall through
          case 80: break;
          case 12:
            { return HOST_VALUE;
            }
          // fall through
          case 81: break;
          case 13:
            { yybegin(IN_PATH); return SLASH;
            }
          // fall through
          case 82: break;
          case 14:
            { yybegin(IN_PORT); return COLON;
            }
          // fall through
          case 83: break;
          case 15:
            { nameFlag = true; yybegin(IN_QUERY); return QUESTION;
            }
          // fall through
          case 84: break;
          case 16:
            { yybegin(IN_PATH); return PORT_SEGMENT;
            }
          // fall through
          case 85: break;
          case 17:
            { if(nameFlag) return QUERY_NAME; else return QUERY_VALUE;
            }
          // fall through
          case 86: break;
          case 18:
            { nameFlag = true; return AND;
            }
          // fall through
          case 87: break;
          case 19:
            { nameFlag = false; return EQUALS;
            }
          // fall through
          case 88: break;
          case 20:
            { return FRAGMENT_PART;
            }
          // fall through
          case 89: break;
          case 21:
            { lastMatch = yytext(); matchTimes++;
            }
          // fall through
          case 90: break;
          case 22:
            { yypushback(yylength()); yybegin(nextState);
            }
          // fall through
          case 91: break;
          case 23:
            { return SEGMENT;
            }
          // fall through
          case 92: break;
          case 24:
            { return SLASH;
            }
          // fall through
          case 93: break;
          case 25:
            { yypushback(yylength()); yybegin(IN_HEADER_FIELD_NAME);
            }
          // fall through
          case 94: break;
          case 26:
            { matchTimes = 0; lastMatch = ""; yybegin(IN_BODY); return WHITE_SPACE;
            }
          // fall through
          case 95: break;
          case 27:
            { return FIELD_NAME;
            }
          // fall through
          case 96: break;
          case 28:
            { yybegin(IN_HEADER_FIELD_VALUE); return COLON;
            }
          // fall through
          case 97: break;
          case 29:
            { yypushback(yylength()); yybegin(IN_HEADER_FIELD_VALUE_NO_SPACE);
            }
          // fall through
          case 98: break;
          case 30:
            { yypushback(yylength()); yybegin(IN_HEADER_FIELD_VALUE); return FIELD_VALUE;
            }
          // fall through
          case 99: break;
          case 31:
            { return INPUT_FILE_PATH_PART;
            }
          // fall through
          case 100: break;
          case 32:
            { yypushback(yylength()); yybegin(YYINITIAL);
            }
          // fall through
          case 101: break;
          case 33:
            { return OUTPUT_FILE_PATH_PART;
            }
          // fall through
          case 102: break;
          case 34:
            { yybegin(IN_DINAMIC_VARIABLE); return DOLLAR;
            }
          // fall through
          case 103: break;
          case 35:
            { return IDENTIFIER;
            }
          // fall through
          case 104: break;
          case 36:
            { if(nameFlag) return GLOBAL_NAME; else return GLOBAL_VALUE;
            }
          // fall through
          case 105: break;
          case 37:
            { yypushback(yylength()); yybegin(IN_GLOBAL_SCRIPT_END); return SCRIPT_BODY_PAET;
            }
          // fall through
          case 106: break;
          case 38:
            { yypushback(yylength()); yybegin(IN_PRE_SCRIPT_END); return SCRIPT_BODY_PAET;
            }
          // fall through
          case 107: break;
          case 39:
            { return SCHEMA_PART;
            }
          // fall through
          case 108: break;
          case 40:
            { nextState = IN_HOST; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE;
            }
          // fall through
          case 109: break;
          case 41:
            { nextState = IN_QUERY; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE;
            }
          // fall through
          case 110: break;
          case 42:
            { yybegin(IN_INPUT_FILE_PATH); return INPUT_FILE_SIGN;
            }
          // fall through
          case 111: break;
          case 43:
            { nextState = IN_PATH; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE;
            }
          // fall through
          case 112: break;
          case 44:
            { nextState = IN_HEADER_FIELD_VALUE; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE;
            }
          // fall through
          case 113: break;
          case 45:
            { yypushback(yylength()); yybegin(IN_POST_SCRIPT_END); return SCRIPT_BODY_PAET;
            }
          // fall through
          case 114: break;
          case 46:
            { yybegin(IN_OUTPUT_FILE); return END_SCRIPT_BRACE;
            }
          // fall through
          case 115: break;
          case 47:
            { nextState = IN_OUTPUT_FILE_PATH; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE;
            }
          // fall through
          case 116: break;
          case 48:
            { yybegin(nextState); return END_VARIABLE_BRACE;
            }
          // fall through
          case 117: break;
          case 49:
            { nextState = IN_GLOBAL_VARIABLE; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE;
            }
          // fall through
          case 118: break;
          case 50:
            { nameFlag = true; yybegin(IN_DIRECTION_COMMENT); return DIRECTION_COMMENT_START;
            }
          // fall through
          case 119: break;
          case 51:
            { yypushback(1); return BLOCK_COMMENT;
            }
          // fall through
          case 120: break;
          case 52:
            { yypushback(1); return LINE_COMMENT;
            }
          // fall through
          case 121: break;
          case 53:
            { yybegin(YYINITIAL); return END_SCRIPT_BRACE;
            }
          // fall through
          case 122: break;
          case 54:
            { yybegin(IN_HOST); return SCHEMA_SEPARATE;
            }
          // fall through
          case 123: break;
          case 55:
            { if(LexerUtils.endsWithLineBreak(this)) { nextState = IN_MULTIPART; yypushback(yylength()); yybegin(IN_TRIM_PREFIX_SPACE); return detectBodyType(this); }
            }
          // fall through
          case 124: break;
          case 56:
            { if(LexerUtils.endsWithLineBreak(this)) { nextState = YYINITIAL; yypushback(yylength()); yybegin(IN_TRIM_PREFIX_SPACE); return detectBodyType(this); }
            }
          // fall through
          case 125: break;
          case 57:
            { nextState = IN_OUTPUT_FILE_PATH; yypushback(yylength()); yybegin(IN_TRIM_PREFIX_SPACE); return detectBodyType(this);
            }
          // fall through
          case 126: break;
          case 58:
            { yybegin(IN_OUTPUT_FILE_PATH); return OUTPUT_FILE_SIGN;
            }
          // fall through
          case 127: break;
          case 59:
            { return OUTPUT_FILE_SIGN;
            }
          // fall through
          case 128: break;
          case 60:
            { yybegin(detectBoundaryState(yytext())); return MESSAGE_BOUNDARY;
            }
          // fall through
          case 129: break;
          case 61:
            { return REQUEST_COMMENT;
            }
          // fall through
          case 130: break;
          case 62:
            { nextState = IN_MULTIPART; yypushback(yylength()); yybegin(IN_TRIM_PREFIX_SPACE); return detectBodyType(this);
            }
          // fall through
          case 131: break;
          case 63:
            { nextState = YYINITIAL; yypushback(yylength()); yybegin(IN_TRIM_PREFIX_SPACE); return detectBodyType(this);
            }
          // fall through
          case 132: break;
          case 64:
            { yybegin(IN_PRE_SCRIPT); return IN_START_SCRIPT_BRACE;
            }
          // fall through
          case 133: break;
          case 65:
            { if(LexerUtils.endsWithLineBreak(this)) { nextState = IN_POST_SCRIPT; yypushback(yylength()); yybegin(IN_TRIM_PREFIX_SPACE); return detectBodyType(this); }
            }
          // fall through
          case 134: break;
          case 66:
            { return OUT_START_SCRIPT_BRACE;
            }
          // fall through
          case 135: break;
          case 67:
            { yybegin(IN_GLOBAL_SCRIPT); return GLOBAL_START_SCRIPT_BRACE;
            }
          // fall through
          case 136: break;
          case 68:
            { nextState = IN_POST_SCRIPT; yypushback(yylength()); yybegin(IN_TRIM_PREFIX_SPACE); return detectBodyType(this);
            }
          // fall through
          case 137: break;
          case 69:
            { return HTTP_VERSION;
            }
          // fall through
          case 138: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
