// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _HttpLexer.flex

package org.javamaster.httpclient;

import com.intellij.psi.tree.IElementType;
import org.javamaster.httpclient.utils.LexerUtils;
import static org.javamaster.httpclient.utils.LexerUtils.*;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.javamaster.httpclient.psi.HttpTypes.*;



public class _HttpLexer implements com.intellij.lexer.FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_GLOBAL_SCRIPT = 2;
  public static final int IN_GLOBAL_SCRIPT_END = 4;
  public static final int IN_PRE_SCRIPT = 6;
  public static final int IN_PRE_SCRIPT_END = 8;
  public static final int IN_DIRECTION_COMMENT = 10;
  public static final int IN_FIRST_LINE = 12;
  public static final int IN_HOST = 14;
  public static final int IN_PORT = 16;
  public static final int IN_QUERY = 18;
  public static final int IN_FRAGMENT = 20;
  public static final int IN_BODY = 22;
  public static final int IN_TRIM_PREFIX_SPACE = 24;
  public static final int IN_TRIM_PREFIX_ONLY_SPACE = 26;
  public static final int IN_PATH = 28;
  public static final int IN_HEADER = 30;
  public static final int IN_HEADER_FIELD_NAME = 32;
  public static final int IN_HEADER_FIELD_VALUE = 34;
  public static final int IN_HEADER_FIELD_VALUE_NO_SPACE = 36;
  public static final int IN_POST_SCRIPT = 38;
  public static final int IN_POST_SCRIPT_END = 40;
  public static final int IN_INPUT_FILE_PATH = 42;
  public static final int IN_OUTPUT_FILE = 44;
  public static final int IN_OUTPUT_FILE_PATH = 46;
  public static final int IN_VERSION = 48;
  public static final int IN_MULTIPART = 50;
  public static final int IN_VARIABLE = 52;
  public static final int IN_DINAMIC_VARIABLE = 54;
  public static final int IN_DINAMIC_VARIABLE_ARGS = 56;
  public static final int IN_GLOBAL_VARIABLE = 58;
  public static final int IN_GLOBAL_VARIABLE_VALUE = 60;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\0\1\20\1\21\1\22\1\23\12\24\1\25"+
    "\1\0\1\26\1\27\1\30\1\31\1\32\7\33\1\34"+
    "\7\33\1\35\3\33\1\36\6\33\4\0\1\37\1\0"+
    "\1\40\1\41\1\40\1\42\3\40\1\43\6\40\1\44"+
    "\1\45\2\40\1\46\1\47\1\50\1\40\1\51\3\40"+
    "\1\52\1\0\1\53\7\0\1\3\32\0\1\1\u01df\0"+
    "\1\1\177\0\13\1\35\0\2\3\5\0\1\1\57\0"+
    "\1\1\240\0\1\1\377\0\u0100\54";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\2\1\21\0\1\2\1\1\3\2\1\3\1\4"+
    "\3\5\1\6\1\2\1\5\1\7\2\6\1\10\1\7"+
    "\2\11\1\1\5\2\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\2\2\24\12\25"+
    "\2\26\1\27\1\30\1\0\1\31\2\32\2\31\1\33"+
    "\1\34\3\35\1\5\2\36\5\5\1\2\1\37\1\32"+
    "\1\37\1\1\1\37\3\40\1\41\1\6\1\41\1\1"+
    "\1\41\4\2\1\42\1\43\1\2\1\44\2\45\1\46"+
    "\1\47\1\50\3\51\1\52\2\53\1\2\6\0\1\54"+
    "\2\5\1\0\1\55\2\7\3\0\1\56\1\57\1\60"+
    "\2\24\1\25\4\0\1\25\2\0\2\25\1\61\2\0"+
    "\1\62\1\0\1\63\2\5\1\64\1\5\1\65\2\37"+
    "\1\0\2\41\1\0\1\66\2\0\1\67\1\45\2\51"+
    "\2\53\1\70\1\71\1\0\1\72\1\0\3\73\2\0"+
    "\1\5\1\74\1\7\1\75\2\0\1\56\1\24\4\0"+
    "\1\25\1\0\1\76\1\25\2\77\2\0\1\100\2\5"+
    "\1\37\1\101\1\41\1\102\1\0\1\103\1\51\1\53"+
    "\2\104\3\0\1\7\1\0\1\24\1\0\1\105\3\106"+
    "\1\0\1\76\1\25\1\77\1\0\1\5\1\0\1\37"+
    "\1\41\1\0\1\103\1\51\1\53\2\72\1\107\1\0"+
    "\1\105\1\0\1\110\1\111\1\0\1\112\1\113\2\0"+
    "\1\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276\0\u02a3"+
    "\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de\0\u040b"+
    "\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec\0\u0519\0\u0546\0\u0573"+
    "\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0573\0\u0654\0\u0681\0\u06ae"+
    "\0\u06db\0\u0708\0\u0735\0\u0762\0\u078f\0\u0573\0\u07bc\0\u07e9"+
    "\0\u0816\0\u0573\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924"+
    "\0\u0951\0\u097e\0\u0573\0\u09ab\0\u05fa\0\u0573\0\u0573\0\u09d8"+
    "\0\u0a05\0\u0573\0\u0573\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6"+
    "\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e"+
    "\0\u0573\0\u05fa\0\u0c7b\0\u0573\0\u0ca8\0\u0573\0\u0573\0\u0cd5"+
    "\0\u0d02\0\u05fa\0\u0d2f\0\u0573\0\u0573\0\u05fa\0\u0d5c\0\u0d89"+
    "\0\u0573\0\u0db6\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4"+
    "\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0573\0\u05fa\0\u0fd2"+
    "\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a"+
    "\0\u1167\0\u0573\0\u1194\0\u11c1\0\u0573\0\u11ee\0\u121b\0\u0573"+
    "\0\u0573\0\u1248\0\u1275\0\u12a2\0\u12cf\0\u0573\0\u12fc\0\u1329"+
    "\0\u1356\0\u1383\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464\0\u0573"+
    "\0\u1491\0\u14be\0\u14eb\0\u0573\0\u1518\0\u1545\0\u1572\0\u159f"+
    "\0\u15cc\0\u15f9\0\u0573\0\u0573\0\u1626\0\u1653\0\u1680\0\u16ad"+
    "\0\u16da\0\u1707\0\u1734\0\u1761\0\u178e\0\u17bb\0\u17e8\0\u1815"+
    "\0\u0573\0\u1842\0\u186f\0\u0573\0\u0d02\0\u0573\0\u189c\0\u18c9"+
    "\0\u18f6\0\u1923\0\u1950\0\u197d\0\u19aa\0\u19d7\0\u1a04\0\u1a31"+
    "\0\u1a5e\0\u0573\0\u1a8b\0\u1ab8\0\u0573\0\u0573\0\u1ae5\0\u1b12"+
    "\0\u1b3f\0\u1b6c\0\u0573\0\u0573\0\u1b99\0\u13dd\0\u1bc6\0\u0573"+
    "\0\u140a\0\u1bf3\0\u1c20\0\u1c4d\0\u1c7a\0\u1ca7\0\u1cd4\0\u0573"+
    "\0\u1d01\0\u1d2e\0\u0573\0\u1d5b\0\u1d88\0\u1db5\0\u1de2\0\u1e0f"+
    "\0\u1e3c\0\u1e69\0\u1e96\0\u1ec3\0\u0573\0\u1ef0\0\u1f1d\0\u1f4a"+
    "\0\u0573\0\u1f77\0\u1fa4\0\u1fd1\0\u0573\0\u1ffe\0\u0573\0\u202b"+
    "\0\u2058\0\u2085\0\u20b2\0\u0573\0\u20df\0\u210c\0\u2139\0\u2166"+
    "\0\u2193\0\u21c0\0\u21ed\0\u221a\0\u2247\0\u0573\0\u1de2\0\u2274"+
    "\0\u22a1\0\u22ce\0\u22fb\0\u1f1d\0\u2328\0\u2355\0\u2382\0\u23af"+
    "\0\u23dc\0\u2409\0\u2436\0\u2463\0\u2490\0\u0573\0\u24bd\0\u24ea"+
    "\0\u2517\0\u2544\0\u2571\0\u259e\0\u25cb\0\u25f8\0\u2625\0\u2652"+
    "\0\u267f\0\u26ac\0\u26ac";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\40\5\41\2\40\1\42\12\40\1\43\2\40\1\44"+
    "\3\40\1\45\4\46\16\40\12\47\1\50\10\47\1\51"+
    "\31\47\1\40\5\52\4\40\1\53\10\40\1\43\31\40"+
    "\12\47\1\54\10\47\1\51\31\47\12\40\1\53\10\40"+
    "\1\43\31\40\2\55\1\56\1\55\1\57\1\60\15\55"+
    "\1\61\31\55\2\40\2\62\1\63\1\64\15\40\1\43"+
    "\1\40\1\65\14\40\1\66\1\67\5\40\1\70\1\71"+
    "\4\40\2\62\1\63\1\72\2\40\1\73\10\40\2\74"+
    "\1\75\1\74\1\76\3\40\1\77\1\40\4\74\1\40"+
    "\12\74\1\71\4\40\2\62\1\63\1\72\15\40\1\43"+
    "\1\100\30\40\1\101\1\40\2\62\1\63\1\72\2\101"+
    "\1\73\2\101\1\102\7\101\1\43\3\101\1\103\22\101"+
    "\1\104\2\101\1\105\1\40\2\62\1\63\1\72\15\105"+
    "\1\106\31\105\1\107\1\110\1\111\1\112\1\111\1\113"+
    "\2\107\1\114\10\107\1\115\1\107\1\116\2\107\1\117"+
    "\1\107\1\120\24\107\1\121\5\41\15\121\1\122\36\121"+
    "\1\64\15\121\1\122\31\121\1\123\1\0\2\62\1\63"+
    "\1\72\2\123\1\73\12\123\1\124\5\123\1\77\20\123"+
    "\1\125\2\123\2\126\1\127\1\126\1\130\1\131\15\126"+
    "\1\132\31\126\5\40\1\64\13\40\1\133\1\40\1\43"+
    "\1\133\1\134\5\40\4\133\1\40\12\133\3\40\2\135"+
    "\1\62\1\135\1\63\1\64\15\135\1\136\26\135\1\137"+
    "\2\135\2\140\1\141\1\140\1\142\1\143\15\140\1\144"+
    "\26\140\1\145\2\140\12\47\1\146\10\47\1\51\4\47"+
    "\1\147\24\47\12\40\1\150\10\40\1\43\31\40\2\151"+
    "\1\152\1\153\1\152\1\154\15\151\1\155\2\151\1\40"+
    "\1\151\1\40\21\151\2\40\1\151\1\156\5\52\15\156"+
    "\1\157\4\156\1\160\24\156\2\161\1\162\1\163\1\162"+
    "\1\164\15\161\1\165\2\161\1\40\1\161\1\166\21\161"+
    "\1\167\1\40\1\161\2\40\2\62\1\63\1\64\15\40"+
    "\1\43\10\40\1\170\41\40\1\171\1\40\1\43\36\40"+
    "\1\64\3\40\1\172\7\40\2\173\1\43\1\173\6\40"+
    "\17\173\1\40\1\174\6\40\1\64\7\40\1\175\3\40"+
    "\2\173\1\43\1\173\6\40\17\173\1\40\1\174\6\40"+
    "\1\64\1\40\1\176\4\40\1\177\1\40\1\200\1\40"+
    "\1\201\2\40\1\43\1\202\30\40\2\203\1\162\1\204"+
    "\1\162\1\164\15\203\1\205\3\203\1\206\22\203\2\40"+
    "\1\203\2\207\1\56\1\207\1\57\16\207\1\210\26\207"+
    "\1\211\2\207\56\0\5\41\54\0\1\212\2\0\1\213"+
    "\63\0\1\214\3\0\1\215\36\0\1\216\1\217\101\0"+
    "\4\46\16\0\12\47\1\0\42\47\53\0\1\220\1\0"+
    "\12\47\1\0\4\47\1\221\3\47\1\222\31\47\1\0"+
    "\5\52\122\0\1\223\54\0\1\224\1\0\2\55\1\0"+
    "\1\55\2\0\47\55\2\0\1\56\57\0\1\60\47\0"+
    "\2\55\1\0\1\55\2\0\11\55\1\225\3\55\1\226"+
    "\31\55\2\0\1\62\57\0\1\64\72\0\1\227\101\0"+
    "\1\230\53\0\1\231\53\0\1\232\60\0\1\233\7\0"+
    "\1\72\70\0\2\74\1\0\1\74\6\0\4\74\1\0"+
    "\12\74\27\0\1\100\30\0\1\101\5\0\2\101\1\0"+
    "\2\101\1\0\7\101\1\0\3\101\1\0\22\101\1\0"+
    "\2\101\52\0\1\234\2\0\1\105\5\0\50\105\5\0"+
    "\11\105\1\235\3\105\1\236\31\105\2\107\1\0\1\107"+
    "\1\0\3\107\1\0\10\107\1\0\4\107\1\0\1\107"+
    "\1\0\25\107\1\110\1\237\1\110\1\237\1\110\2\107"+
    "\1\0\10\107\1\0\4\107\1\0\1\107\1\0\24\107"+
    "\1\0\1\237\3\111\1\237\2\0\1\240\10\0\1\241"+
    "\1\0\1\242\4\0\1\243\24\0\1\107\1\110\1\111"+
    "\1\112\1\111\1\110\2\107\1\240\10\107\1\241\1\107"+
    "\1\244\2\107\1\0\1\107\1\243\25\107\1\110\1\111"+
    "\1\112\1\111\1\113\2\107\1\0\10\107\1\0\4\107"+
    "\1\0\1\107\1\0\24\107\10\0\1\245\65\0\1\246"+
    "\33\0\2\107\1\0\1\107\1\0\3\107\1\0\6\107"+
    "\1\247\1\107\1\0\1\107\1\250\2\107\1\0\1\107"+
    "\1\0\24\107\5\0\1\251\54\0\1\252\22\0\1\253"+
    "\24\0\1\123\5\0\2\123\1\0\12\123\1\0\5\123"+
    "\1\0\20\123\1\0\2\123\52\0\1\254\4\0\1\127"+
    "\54\0\2\127\1\130\1\255\70\0\1\133\2\0\1\133"+
    "\6\0\4\133\1\0\12\133\55\0\1\256\2\0\2\140"+
    "\1\0\1\140\2\0\44\140\1\0\2\140\2\0\1\141"+
    "\54\0\2\141\1\142\1\143\47\0\2\140\1\0\1\140"+
    "\2\0\11\140\1\257\3\140\1\260\26\140\1\0\2\140"+
    "\52\0\1\141\55\0\1\261\1\0\5\47\1\262\4\47"+
    "\1\0\42\47\53\0\1\263\1\0\2\151\1\0\1\151"+
    "\2\0\20\151\1\0\1\151\1\0\21\151\2\0\1\151"+
    "\2\0\3\152\50\0\2\151\1\152\1\153\1\152\1\0"+
    "\20\151\1\0\1\151\1\0\21\151\2\0\1\151\2\0"+
    "\3\152\1\154\47\0\2\151\1\0\1\151\2\0\11\151"+
    "\1\264\3\151\1\265\2\151\1\0\1\151\1\0\21\151"+
    "\2\0\1\151\30\0\1\266\24\0\2\161\1\0\1\161"+
    "\2\0\20\161\1\0\1\161\1\0\21\161\2\0\1\161"+
    "\2\0\3\162\50\0\2\161\1\162\1\163\1\162\1\0"+
    "\20\161\1\0\1\161\1\0\21\161\2\0\1\161\2\0"+
    "\3\162\1\164\47\0\2\161\1\0\1\161\2\0\11\161"+
    "\1\267\3\161\1\270\2\161\1\0\1\161\1\0\21\161"+
    "\2\0\1\161\30\0\1\271\76\0\1\272\40\0\1\273"+
    "\37\0\1\274\54\0\2\173\1\0\1\173\6\0\17\173"+
    "\56\0\1\275\1\0\7\176\1\276\45\176\14\177\1\276"+
    "\40\177\24\0\1\202\30\0\2\203\1\0\1\203\2\0"+
    "\21\203\1\0\22\203\2\0\3\203\1\162\1\204\1\162"+
    "\1\0\21\203\1\0\22\203\2\0\3\203\1\0\1\203"+
    "\2\0\11\203\1\277\3\203\1\300\3\203\1\0\22\203"+
    "\2\0\1\203\2\207\1\0\1\207\1\0\45\207\1\0"+
    "\4\207\1\0\1\207\1\0\12\207\1\301\3\207\1\302"+
    "\26\207\1\0\2\207\52\0\1\303\34\0\1\304\32\0"+
    "\1\305\44\0\2\214\3\306\12\214\1\307\35\214\2\215"+
    "\1\310\1\311\1\312\50\215\52\0\1\313\7\0\1\314"+
    "\47\0\12\221\1\214\4\221\1\315\35\221\2\222\1\47"+
    "\1\222\1\47\5\222\1\215\42\222\2\0\3\316\1\223"+
    "\47\0\2\225\1\306\1\225\1\306\1\214\11\225\1\317"+
    "\35\225\2\226\1\310\1\226\1\312\1\215\47\226\23\0"+
    "\1\320\72\0\1\321\62\0\1\322\53\0\1\323\6\0"+
    "\1\235\1\214\3\306\1\214\11\235\1\324\35\235\1\236"+
    "\1\215\1\310\1\311\1\312\1\215\47\236\1\0\5\237"+
    "\57\0\1\325\65\0\1\326\56\0\1\327\36\0\1\330"+
    "\22\0\1\253\24\0\2\107\1\0\1\107\1\0\3\107"+
    "\1\0\10\107\1\0\1\107\1\331\2\107\1\0\1\107"+
    "\1\0\24\107\10\0\1\332\65\0\1\333\2\0\1\333"+
    "\6\0\4\333\1\0\12\333\3\0\2\247\1\306\1\247"+
    "\1\306\3\247\1\214\6\247\1\334\1\247\1\214\4\247"+
    "\1\214\1\247\1\214\24\247\2\250\1\335\1\250\1\336"+
    "\3\250\1\337\10\250\1\337\4\250\1\337\1\250\1\337"+
    "\24\250\52\0\1\340\7\0\1\341\47\0\2\257\1\306"+
    "\1\257\1\306\1\214\11\257\1\342\32\257\1\214\2\257"+
    "\2\260\1\310\1\260\1\312\1\215\44\260\1\215\2\260"+
    "\1\0\5\261\47\0\12\47\1\0\37\47\1\343\2\47"+
    "\1\0\5\263\47\0\2\264\1\306\1\264\1\306\1\214"+
    "\11\264\1\344\6\264\1\214\1\264\1\214\21\264\2\214"+
    "\1\264\2\265\1\310\1\265\1\312\1\215\20\265\1\215"+
    "\1\265\1\215\21\265\2\215\1\265\5\0\1\345\47\0"+
    "\2\267\1\306\1\267\1\306\1\214\11\267\1\346\6\267"+
    "\1\214\1\267\1\214\21\267\2\214\1\267\2\270\1\310"+
    "\1\270\1\312\1\215\20\270\1\215\1\270\1\215\21\270"+
    "\2\215\1\270\5\0\1\347\105\0\1\350\37\0\1\351"+
    "\2\0\1\351\6\0\4\351\1\0\12\351\3\0\2\277"+
    "\1\306\1\277\1\306\1\214\11\277\1\352\7\277\1\214"+
    "\22\277\2\214\1\277\2\300\1\310\1\300\1\312\1\215"+
    "\21\300\1\215\22\300\2\215\1\300\2\301\1\306\1\301"+
    "\1\306\12\301\1\353\32\301\1\214\2\301\2\302\1\310"+
    "\1\302\1\312\45\302\1\215\2\302\2\305\2\354\1\355"+
    "\47\305\1\0\2\214\3\306\12\214\1\307\3\214\1\356"+
    "\31\214\2\0\1\310\64\0\1\357\114\0\1\360\2\0"+
    "\12\221\1\214\4\221\1\315\3\221\1\47\31\221\2\0"+
    "\3\316\50\0\2\225\1\306\1\225\1\306\1\214\11\225"+
    "\1\317\3\225\1\361\31\225\41\0\1\362\60\0\1\232"+
    "\7\0\1\235\1\214\3\306\1\214\11\235\1\324\3\235"+
    "\1\363\31\235\10\0\1\364\65\0\1\365\2\0\1\365"+
    "\6\0\4\365\1\0\12\365\3\0\2\327\1\366\1\367"+
    "\1\370\50\327\52\0\1\371\2\0\2\331\1\366\1\331"+
    "\1\370\3\331\1\327\10\331\1\327\4\331\1\327\1\331"+
    "\1\327\24\331\2\332\2\335\1\336\47\332\2\0\5\372"+
    "\13\0\1\333\2\0\1\333\6\0\4\333\1\0\12\333"+
    "\3\0\2\247\1\306\1\247\1\306\3\247\1\214\6\247"+
    "\1\334\1\247\1\214\1\247\1\373\2\247\1\214\1\247"+
    "\1\214\24\247\2\0\1\335\52\0\2\337\1\335\1\374"+
    "\1\336\50\337\12\0\1\375\42\0\2\257\1\306\1\257"+
    "\1\306\1\214\11\257\1\342\3\257\1\376\26\257\1\214"+
    "\2\257\12\47\1\377\42\47\2\264\1\306\1\264\1\306"+
    "\1\214\11\264\1\344\3\264\1\u0100\2\264\1\214\1\264"+
    "\1\214\21\264\2\214\1\264\2\267\1\306\1\267\1\306"+
    "\1\214\11\267\1\346\3\267\1\u0101\2\267\1\214\1\267"+
    "\1\214\21\267\2\214\1\267\35\0\1\u0102\20\0\5\u0103"+
    "\13\0\1\351\2\0\1\351\6\0\4\351\1\0\12\351"+
    "\3\0\2\277\1\306\1\277\1\306\1\214\11\277\1\352"+
    "\3\277\1\u0104\3\277\1\214\22\277\2\214\1\277\2\301"+
    "\1\306\1\301\1\306\12\301\1\353\3\301\1\u0105\26\301"+
    "\1\214\2\301\2\0\1\354\54\0\2\u0106\1\u0107\52\0"+
    "\3\u0108\1\357\61\0\1\u0109\42\0\2\55\1\u0106\1\55"+
    "\1\u0107\1\0\47\55\44\0\1\323\10\0\1\105\1\0"+
    "\2\u0106\1\u0107\1\0\47\105\2\364\2\366\1\370\47\364"+
    "\2\0\5\u010a\13\0\1\365\2\0\1\365\6\0\4\365"+
    "\1\0\12\365\5\0\1\366\64\0\1\u010b\43\0\5\372"+
    "\47\0\2\107\1\u0106\1\107\1\u0107\3\107\1\0\10\107"+
    "\1\0\4\107\1\0\1\107\1\0\24\107\2\0\3\u010c"+
    "\1\375\47\0\2\140\1\u0106\1\140\1\u0107\1\0\44\140"+
    "\1\0\2\140\2\0\3\u010d\1\377\47\0\2\151\1\u0106"+
    "\1\151\1\u0107\1\0\20\151\1\0\1\151\1\0\21\151"+
    "\2\0\1\151\2\161\1\u0106\1\161\1\u0107\1\0\20\161"+
    "\1\0\1\161\1\0\21\161\2\0\1\161\23\0\1\u010e"+
    "\32\0\5\u0103\47\0\2\203\1\u0106\1\203\1\u0107\1\0"+
    "\21\203\1\0\22\203\2\0\1\203\2\207\1\u0106\1\207"+
    "\1\u0107\45\207\1\0\2\207\2\0\1\u0106\54\0\3\u0108"+
    "\52\0\3\u010f\1\u0109\50\0\5\u010a\51\0\3\u0110\1\u010b"+
    "\51\0\3\u010c\52\0\3\u010d\74\0\1\u0111\32\0\3\u010f"+
    "\52\0\3\u0110\72\0\1\u0112\1\0\1\u0111\54\0\1\u0113"+
    "\30\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9945];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\2\1\21\0\1\11\4\1\1\11\10\1\1\11"+
    "\3\1\1\11\10\1\1\11\2\1\2\11\2\1\2\11"+
    "\15\1\1\11\2\1\1\11\1\0\2\11\4\1\2\11"+
    "\3\1\1\11\14\1\1\11\13\1\1\11\2\1\1\11"+
    "\2\1\2\11\4\1\1\11\3\1\6\0\1\11\2\1"+
    "\1\0\1\11\2\1\3\0\1\1\2\11\3\1\4\0"+
    "\1\1\2\0\2\1\1\11\2\0\1\11\1\0\1\11"+
    "\7\1\1\0\2\1\1\0\1\11\2\0\2\11\4\1"+
    "\2\11\1\0\1\1\1\0\1\11\2\1\2\0\3\1"+
    "\1\11\2\0\1\11\1\1\4\0\1\1\1\0\2\1"+
    "\1\11\1\1\2\0\1\11\3\1\1\11\1\1\1\11"+
    "\1\0\3\1\1\11\1\1\3\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\2\1\1\0\3\1\1\0\1\1"+
    "\1\0\2\1\1\0\3\1\1\11\2\1\1\0\1\1"+
    "\1\0\2\1\1\0\2\1\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
        private boolean nameFlag;
        private int nextState;

        public int matchTimes;
        public CharSequence lastMatch;

        public _HttpLexer() {
          this((java.io.Reader)null);
        }

        private static String zzToPrintable(CharSequence str) {
          return zzToPrintable(str.toString());
        }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _HttpLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case IN_BODY: {
              nextState = YYINITIAL; yypushback(yylength()); yybegin(IN_TRIM_PREFIX_SPACE); return detectBodyType(this);
            }  // fall though
            case 276: break;
            case IN_HEADER_FIELD_VALUE: {
              yybegin(YYINITIAL); return FIELD_VALUE;
            }  // fall though
            case 277: break;
            case IN_HEADER_FIELD_VALUE_NO_SPACE: {
              yybegin(YYINITIAL); return FIELD_VALUE;
            }  // fall though
            case 278: break;
            case IN_POST_SCRIPT: {
              yybegin(YYINITIAL); return SCRIPT_BODY_PAET;
            }  // fall though
            case 279: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return WHITE_SPACE;
            }
          // fall through
          case 77: break;
          case 2:
            { return BAD_CHARACTER;
            }
          // fall through
          case 78: break;
          case 3:
            { yybegin(IN_GLOBAL_VARIABLE); return AT;
            }
          // fall through
          case 79: break;
          case 4:
            { yybegin(IN_FIRST_LINE); return REQUEST_METHOD;
            }
          // fall through
          case 80: break;
          case 5:
            { 
            }
          // fall through
          case 81: break;
          case 6:
            { yybegin(YYINITIAL); return WHITE_SPACE;
            }
          // fall through
          case 82: break;
          case 7:
            { if(nameFlag) return DIRECTION_NAME_PART; else return DIRECTION_VALUE_PART;
            }
          // fall through
          case 83: break;
          case 8:
            { nameFlag = false; return WHITE_SPACE;
            }
          // fall through
          case 84: break;
          case 9:
            { yybegin(IN_HEADER); return WHITE_SPACE;
            }
          // fall through
          case 85: break;
          case 10:
            { yybegin(IN_VERSION); return WHITE_SPACE;
            }
          // fall through
          case 86: break;
          case 11:
            { yybegin(IN_FRAGMENT); return HASH;
            }
          // fall through
          case 87: break;
          case 12:
            { return HOST_VALUE;
            }
          // fall through
          case 88: break;
          case 13:
            { yybegin(IN_PATH); return SLASH;
            }
          // fall through
          case 89: break;
          case 14:
            { yybegin(IN_PORT); return COLON;
            }
          // fall through
          case 90: break;
          case 15:
            { nameFlag = true; yybegin(IN_QUERY); return QUESTION;
            }
          // fall through
          case 91: break;
          case 16:
            { yybegin(IN_PATH); return PORT_SEGMENT;
            }
          // fall through
          case 92: break;
          case 17:
            { if(nameFlag) return QUERY_NAME; else return QUERY_VALUE;
            }
          // fall through
          case 93: break;
          case 18:
            { nameFlag = true; return AND;
            }
          // fall through
          case 94: break;
          case 19:
            { nameFlag = false; return EQUALS;
            }
          // fall through
          case 95: break;
          case 20:
            { return FRAGMENT_PART;
            }
          // fall through
          case 96: break;
          case 21:
            { lastMatch = yytext(); matchTimes++;
            }
          // fall through
          case 97: break;
          case 22:
            { yypushback(yylength()); yybegin(nextState);
            }
          // fall through
          case 98: break;
          case 23:
            { return SEGMENT;
            }
          // fall through
          case 99: break;
          case 24:
            { return SLASH;
            }
          // fall through
          case 100: break;
          case 25:
            { yypushback(yylength()); yybegin(IN_HEADER_FIELD_NAME);
            }
          // fall through
          case 101: break;
          case 26:
            { matchTimes = 0; lastMatch = ""; yybegin(IN_BODY); return WHITE_SPACE;
            }
          // fall through
          case 102: break;
          case 27:
            { return FIELD_NAME;
            }
          // fall through
          case 103: break;
          case 28:
            { yybegin(IN_HEADER_FIELD_VALUE); return COLON;
            }
          // fall through
          case 104: break;
          case 29:
            { yypushback(yylength()); yybegin(IN_HEADER_FIELD_VALUE_NO_SPACE);
            }
          // fall through
          case 105: break;
          case 30:
            { yypushback(yylength()); yybegin(IN_HEADER_FIELD_VALUE); return FIELD_VALUE;
            }
          // fall through
          case 106: break;
          case 31:
            { return INPUT_FILE_PATH_PART;
            }
          // fall through
          case 107: break;
          case 32:
            { yypushback(yylength()); yybegin(YYINITIAL);
            }
          // fall through
          case 108: break;
          case 33:
            { return OUTPUT_FILE_PATH_PART;
            }
          // fall through
          case 109: break;
          case 34:
            { yybegin(IN_DINAMIC_VARIABLE); return DOLLAR;
            }
          // fall through
          case 110: break;
          case 35:
            { return IDENTIFIER;
            }
          // fall through
          case 111: break;
          case 36:
            { yybegin(IN_DINAMIC_VARIABLE_ARGS); return LEFT_BRACKET;
            }
          // fall through
          case 112: break;
          case 37:
            { return STRING;
            }
          // fall through
          case 113: break;
          case 38:
            { yybegin(IN_DINAMIC_VARIABLE); return RIGHT_BRACKET;
            }
          // fall through
          case 114: break;
          case 39:
            { return COMMA;
            }
          // fall through
          case 115: break;
          case 40:
            { return INTEGER;
            }
          // fall through
          case 116: break;
          case 41:
            { return GLOBAL_NAME;
            }
          // fall through
          case 117: break;
          case 42:
            { nextState = IN_GLOBAL_VARIABLE_VALUE; yybegin(IN_TRIM_PREFIX_ONLY_SPACE); return EQUALS;
            }
          // fall through
          case 118: break;
          case 43:
            { return GLOBAL_VALUE;
            }
          // fall through
          case 119: break;
          case 44:
            { yypushback(yylength()); yybegin(IN_GLOBAL_SCRIPT_END); return SCRIPT_BODY_PAET;
            }
          // fall through
          case 120: break;
          case 45:
            { yypushback(yylength()); yybegin(IN_PRE_SCRIPT_END); return SCRIPT_BODY_PAET;
            }
          // fall through
          case 121: break;
          case 46:
            { return SCHEMA_PART;
            }
          // fall through
          case 122: break;
          case 47:
            { nextState = IN_HOST; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE;
            }
          // fall through
          case 123: break;
          case 48:
            { nextState = IN_QUERY; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE;
            }
          // fall through
          case 124: break;
          case 49:
            { yybegin(IN_INPUT_FILE_PATH); return INPUT_FILE_SIGN;
            }
          // fall through
          case 125: break;
          case 50:
            { nextState = IN_PATH; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE;
            }
          // fall through
          case 126: break;
          case 51:
            { nextState = IN_HEADER_FIELD_VALUE; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE;
            }
          // fall through
          case 127: break;
          case 52:
            { yypushback(yylength()); yybegin(IN_POST_SCRIPT_END); return SCRIPT_BODY_PAET;
            }
          // fall through
          case 128: break;
          case 53:
            { yybegin(IN_OUTPUT_FILE); return END_SCRIPT_BRACE;
            }
          // fall through
          case 129: break;
          case 54:
            { nextState = IN_OUTPUT_FILE_PATH; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE;
            }
          // fall through
          case 130: break;
          case 55:
            { yybegin(nextState); return END_VARIABLE_BRACE;
            }
          // fall through
          case 131: break;
          case 56:
            { nextState = IN_GLOBAL_VARIABLE_VALUE; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE;
            }
          // fall through
          case 132: break;
          case 57:
            { nameFlag = true; yybegin(IN_DIRECTION_COMMENT); return DIRECTION_COMMENT_START;
            }
          // fall through
          case 133: break;
          case 58:
            { yypushback(1); return BLOCK_COMMENT;
            }
          // fall through
          case 134: break;
          case 59:
            { yypushback(1); return LINE_COMMENT;
            }
          // fall through
          case 135: break;
          case 60:
            { yybegin(YYINITIAL); return END_SCRIPT_BRACE;
            }
          // fall through
          case 136: break;
          case 61:
            { yybegin(IN_HOST); return SCHEMA_SEPARATE;
            }
          // fall through
          case 137: break;
          case 62:
            { if(LexerUtils.endsWithLineBreak(this)) { nextState = IN_MULTIPART; yypushback(yylength()); yybegin(IN_TRIM_PREFIX_SPACE); return detectBodyType(this); }
            }
          // fall through
          case 138: break;
          case 63:
            { if(LexerUtils.endsWithLineBreak(this)) { nextState = YYINITIAL; yypushback(yylength()); yybegin(IN_TRIM_PREFIX_SPACE); return detectBodyType(this); }
            }
          // fall through
          case 139: break;
          case 64:
            { nextState = IN_OUTPUT_FILE_PATH; yypushback(yylength()); yybegin(IN_TRIM_PREFIX_SPACE); return detectBodyType(this);
            }
          // fall through
          case 140: break;
          case 65:
            { yybegin(IN_OUTPUT_FILE_PATH); return OUTPUT_FILE_SIGN;
            }
          // fall through
          case 141: break;
          case 66:
            { return OUTPUT_FILE_SIGN;
            }
          // fall through
          case 142: break;
          case 67:
            { yybegin(detectBoundaryState(yytext(), this)); return MESSAGE_BOUNDARY;
            }
          // fall through
          case 143: break;
          case 68:
            { return REQUEST_COMMENT;
            }
          // fall through
          case 144: break;
          case 69:
            { nextState = IN_MULTIPART; yypushback(yylength()); yybegin(IN_TRIM_PREFIX_SPACE); return detectBodyType(this);
            }
          // fall through
          case 145: break;
          case 70:
            { nextState = YYINITIAL; yypushback(yylength()); yybegin(IN_TRIM_PREFIX_SPACE); return detectBodyType(this);
            }
          // fall through
          case 146: break;
          case 71:
            { yybegin(IN_PRE_SCRIPT); return IN_START_SCRIPT_BRACE;
            }
          // fall through
          case 147: break;
          case 72:
            { if(LexerUtils.endsWithLineBreak(this)) { nextState = IN_POST_SCRIPT; yypushback(yylength()); yybegin(IN_TRIM_PREFIX_SPACE); return detectBodyType(this); }
            }
          // fall through
          case 148: break;
          case 73:
            { return OUT_START_SCRIPT_BRACE;
            }
          // fall through
          case 149: break;
          case 74:
            { yybegin(IN_GLOBAL_SCRIPT); return GLOBAL_START_SCRIPT_BRACE;
            }
          // fall through
          case 150: break;
          case 75:
            { nextState = IN_POST_SCRIPT; yypushback(yylength()); yybegin(IN_TRIM_PREFIX_SPACE); return detectBodyType(this);
            }
          // fall through
          case 151: break;
          case 76:
            { return HTTP_VERSION;
            }
          // fall through
          case 152: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
