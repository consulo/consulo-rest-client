// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _HttpLexer.flex

package org.javamaster.httpclient;

import com.intellij.psi.tree.IElementType;
import static org.javamaster.httpclient.utils.LexerUtils.*;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.javamaster.httpclient.psi.HttpTypes.*;



public class _HttpLexer implements com.intellij.lexer.FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_GLOBAL_SCRIPT = 2;
  public static final int IN_GLOBAL_SCRIPT_END = 4;
  public static final int IN_PRE_SCRIPT = 6;
  public static final int IN_PRE_SCRIPT_END = 8;
  public static final int IN_DIRECTION_COMMENT = 10;
  public static final int IN_FIRST_LINE = 12;
  public static final int IN_HOST = 14;
  public static final int IN_PORT = 16;
  public static final int IN_PATH = 18;
  public static final int IN_QUERY = 20;
  public static final int IN_FRAGMENT = 22;
  public static final int IN_BODY = 24;
  public static final int IN_HEADER = 26;
  public static final int IN_HEADER_FIELD_NAME = 28;
  public static final int IN_HEADER_FIELD_VALUE = 30;
  public static final int IN_HEADER_FIELD_VALUE_NO_SPACE = 32;
  public static final int IN_POST_SCRIPT = 34;
  public static final int IN_POST_SCRIPT_END = 36;
  public static final int IN_RES_SCRIPT_BODY_PAET = 38;
  public static final int IN_INPUT_FILE_PATH = 40;
  public static final int IN_OUTPUT_FILE = 42;
  public static final int IN_OUTPUT_FILE_PATH = 44;
  public static final int IN_VERSION = 46;
  public static final int IN_MULTIPART = 48;
  public static final int IN_VARIABLE = 50;
  public static final int IN_DINAMIC_VARIABLE = 52;
  public static final int IN_GLOBAL_VARIABLE = 54;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\6"+
    "\1\0\1\7\1\10\1\11\1\12\6\0\1\13\1\14"+
    "\1\15\12\16\1\17\1\0\1\20\1\21\1\22\1\23"+
    "\1\24\7\25\1\26\7\25\1\27\3\25\1\30\6\25"+
    "\6\0\7\31\1\32\7\31\1\33\2\31\1\34\1\35"+
    "\2\31\1\36\3\31\1\37\1\0\1\40\7\0\1\3"+
    "\32\0\1\1\u01df\0\1\1\177\0\13\1\35\0\2\3"+
    "\5\0\1\1\57\0\1\1\240\0\1\1\377\0\u0100\41";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\20\0\1\1\13\0\1\2\1\3\3\2\1\4\1\5"+
    "\3\6\1\7\1\2\1\6\1\10\2\7\1\11\1\10"+
    "\2\12\1\3\4\2\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\2\1\24\1\25\1\26"+
    "\1\2\2\27\10\30\1\31\2\32\1\31\1\33\1\34"+
    "\3\35\2\1\2\6\1\2\1\36\1\32\1\36\1\3"+
    "\1\36\3\37\1\40\1\7\1\40\1\3\1\40\3\2"+
    "\1\41\1\42\1\2\4\43\1\2\5\0\1\44\1\6"+
    "\1\0\1\45\1\10\2\0\1\46\1\47\1\50\1\51"+
    "\1\27\2\0\1\30\1\52\2\0\1\53\1\1\1\0"+
    "\1\6\1\0\1\36\1\0\1\40\3\0\1\54\1\43"+
    "\1\55\1\56\1\0\2\57\2\0\2\57\1\60\1\57"+
    "\1\61\1\0\1\46\2\0\1\57\1\0\1\62\1\57"+
    "\1\63\1\6\1\64\1\57\1\65\1\57\1\66\2\0"+
    "\1\57\2\67\2\0\2\70\1\71\2\0\1\72\1\0"+
    "\1\73\1\0\1\74\1\0\1\75\1\0\1\76\2\0"+
    "\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\356"+
    "\0\u0110\0\u0132\0\u0154\0\u0176\0\u0198\0\u01ba\0\u01dc\0\u01fe"+
    "\0\u0220\0\u0242\0\u0264\0\u0286\0\u02a8\0\u02ca\0\u02ec\0\u030e"+
    "\0\u0330\0\u0352\0\u0374\0\u0396\0\u03b8\0\u03da\0\u03fc\0\u041e"+
    "\0\u0440\0\u03b8\0\u0462\0\u0484\0\u04a6\0\u04c8\0\u04ea\0\u050c"+
    "\0\u052e\0\u0550\0\u03b8\0\u0572\0\u0594\0\u05b6\0\u03b8\0\u05d8"+
    "\0\u05fa\0\u061c\0\u063e\0\u0660\0\u0682\0\u06a4\0\u03b8\0\u06c6"+
    "\0\u041e\0\u03b8\0\u03b8\0\u06e8\0\u070a\0\u041e\0\u072c\0\u074e"+
    "\0\u03b8\0\u03b8\0\u0770\0\u0792\0\u07b4\0\u07d6\0\u07f8\0\u081a"+
    "\0\u083c\0\u085e\0\u0880\0\u08a2\0\u08c4\0\u03b8\0\u03b8\0\u08e6"+
    "\0\u041e\0\u0908\0\u03b8\0\u03b8\0\u041e\0\u092a\0\u094c\0\u096e"+
    "\0\u0990\0\u09b2\0\u09d4\0\u09f6\0\u0a18\0\u0a3a\0\u0a5c\0\u0a7e"+
    "\0\u03b8\0\u041e\0\u0aa0\0\u0ac2\0\u0ae4\0\u0b06\0\u0b28\0\u0b4a"+
    "\0\u0b6c\0\u0b8e\0\u0bb0\0\u03b8\0\u0bd2\0\u0bf4\0\u0c16\0\u0c38"+
    "\0\u0c5a\0\u0c7c\0\u0c9e\0\u0cc0\0\u0ce2\0\u0d04\0\u0d26\0\u0d48"+
    "\0\u03b8\0\u0d6a\0\u0d8c\0\u03b8\0\u0dae\0\u0dd0\0\u0df2\0\u0e14"+
    "\0\u03b8\0\u03b8\0\u03b8\0\u0e36\0\u0e58\0\u0e7a\0\u0e9c\0\u03b8"+
    "\0\u0ebe\0\u0ee0\0\u03b8\0\u0f02\0\u0f24\0\u0f46\0\u0f68\0\u0f8a"+
    "\0\u0fac\0\u0fce\0\u0ff0\0\u1012\0\u1034\0\u03b8\0\u1056\0\u03b8"+
    "\0\u03b8\0\u1078\0\u03b8\0\u109a\0\u10bc\0\u10de\0\u0484\0\u1100"+
    "\0\u1122\0\u0550\0\u03b8\0\u1144\0\u03b8\0\u1166\0\u1188\0\u07d6"+
    "\0\u11aa\0\u03b8\0\u094c\0\u11cc\0\u11ee\0\u1210\0\u09f6\0\u03b8"+
    "\0\u0ac2\0\u03b8\0\u1232\0\u1254\0\u0c16\0\u03b8\0\u1276\0\u1298"+
    "\0\u12ba\0\u03b8\0\u12dc\0\u12fe\0\u1320\0\u1342\0\u03b8\0\u1364"+
    "\0\u1386\0\u13a8\0\u13ca\0\u13ec\0\u140e\0\u1430\0\u1452\0\u1474"+
    "\0\u1496\0\u1496";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\35\5\36\1\35\1\37\5\35\1\40\2\35\1\41"+
    "\3\35\1\42\4\43\11\35\11\44\1\45\3\44\1\46"+
    "\24\44\1\35\5\47\3\35\1\50\3\35\1\40\24\35"+
    "\11\44\1\51\3\44\1\46\24\44\11\35\1\50\3\35"+
    "\1\40\24\35\2\52\1\53\1\52\1\54\1\55\7\52"+
    "\1\56\24\52\2\35\2\57\1\60\1\61\7\35\1\40"+
    "\1\35\1\62\12\35\1\63\3\35\1\64\1\65\4\35"+
    "\2\57\1\60\1\66\1\35\1\67\3\35\2\70\1\71"+
    "\1\70\1\72\3\35\1\73\1\35\12\70\1\65\4\35"+
    "\2\57\1\60\1\66\7\35\1\40\1\74\23\35\1\75"+
    "\1\35\2\57\1\60\1\66\1\75\1\67\5\75\1\76"+
    "\5\75\1\73\13\75\1\77\2\75\1\100\1\35\2\57"+
    "\1\60\1\66\1\100\1\67\2\100\1\101\2\100\1\40"+
    "\3\100\1\102\15\100\1\103\2\100\1\104\1\35\2\57"+
    "\1\60\1\66\7\104\1\105\24\104\1\106\1\107\1\110"+
    "\1\107\1\110\1\107\1\106\1\111\3\106\1\112\1\106"+
    "\1\113\2\106\1\114\1\106\1\115\17\106\2\116\1\117"+
    "\1\116\1\120\10\116\1\121\24\116\5\35\1\61\5\35"+
    "\1\122\1\35\1\40\1\122\1\123\5\35\12\122\3\35"+
    "\2\124\1\57\1\124\1\60\1\61\7\124\1\125\21\124"+
    "\1\126\2\124\2\127\1\35\1\127\1\35\1\61\7\127"+
    "\1\130\24\127\11\44\1\131\3\44\1\46\4\44\1\132"+
    "\17\44\11\35\1\133\3\35\1\40\41\35\1\40\24\35"+
    "\2\134\1\135\1\136\1\135\1\137\7\134\1\140\2\134"+
    "\1\35\1\134\1\35\17\134\1\141\5\47\7\141\1\142"+
    "\4\141\1\143\17\141\2\144\1\145\1\146\1\145\1\147"+
    "\7\144\1\150\2\144\1\35\1\144\1\151\17\144\2\35"+
    "\2\57\1\60\1\61\7\35\1\40\10\35\1\152\26\35"+
    "\1\153\1\35\1\40\31\35\1\61\2\35\1\154\2\35"+
    "\1\155\1\35\1\40\1\155\6\35\12\155\1\35\1\156"+
    "\6\35\1\61\5\35\1\155\1\35\1\40\1\155\6\35"+
    "\12\155\1\35\1\156\1\35\2\157\1\145\1\160\1\145"+
    "\1\161\7\157\1\162\3\157\1\102\15\157\1\163\1\35"+
    "\1\157\43\0\5\36\41\0\1\164\1\0\1\165\47\0"+
    "\1\166\31\0\1\167\1\170\60\0\4\43\11\0\11\44"+
    "\1\0\30\44\40\0\1\171\1\0\11\44\1\0\3\44"+
    "\1\172\24\44\1\0\5\47\74\0\1\173\41\0\1\174"+
    "\1\0\2\52\1\0\1\52\2\0\34\52\2\0\1\53"+
    "\44\0\1\55\34\0\2\52\1\0\1\52\2\0\7\52"+
    "\1\175\24\52\2\0\1\57\44\0\1\61\51\0\1\176"+
    "\61\0\1\177\40\0\1\200\44\0\1\201\7\0\1\66"+
    "\47\0\2\70\1\0\1\70\6\0\12\70\21\0\1\74"+
    "\23\0\1\75\5\0\1\75\1\0\5\75\1\0\5\75"+
    "\1\0\13\75\1\0\2\75\37\0\1\202\2\0\1\100"+
    "\5\0\1\100\1\0\2\100\1\0\2\100\1\0\3\100"+
    "\1\0\15\100\1\0\2\100\37\0\1\203\2\0\1\104"+
    "\5\0\35\104\5\0\7\104\1\204\24\104\2\106\1\0"+
    "\1\106\1\0\2\106\1\0\3\106\1\0\4\106\1\0"+
    "\1\106\1\0\20\106\1\107\1\110\1\107\1\110\1\107"+
    "\1\106\1\0\3\106\1\0\4\106\1\0\1\106\1\0"+
    "\17\106\1\0\5\110\43\0\1\205\45\0\1\206\26\0"+
    "\2\106\1\0\1\106\1\0\2\106\1\0\3\106\1\0"+
    "\1\106\1\207\2\106\1\0\1\106\1\0\17\106\5\0"+
    "\1\210\41\0\1\211\14\0\1\212\21\0\1\117\52\0"+
    "\1\122\2\0\1\122\6\0\12\122\42\0\1\213\2\0"+
    "\2\127\1\0\1\127\2\0\36\127\1\0\1\127\2\0"+
    "\7\127\1\214\24\127\40\0\1\215\1\0\5\44\1\216"+
    "\3\44\1\0\30\44\40\0\1\217\1\0\2\134\1\0"+
    "\1\134\2\0\12\134\1\0\1\134\1\0\17\134\2\0"+
    "\3\135\35\0\2\134\1\135\1\136\1\135\1\0\12\134"+
    "\1\0\1\134\1\0\17\134\2\0\3\135\1\137\34\0"+
    "\2\134\1\0\1\134\2\0\7\134\1\220\2\134\1\0"+
    "\1\134\1\0\17\134\22\0\1\221\17\0\2\144\1\0"+
    "\1\144\2\0\12\144\1\0\1\144\1\0\17\144\2\0"+
    "\3\145\35\0\2\144\1\145\1\146\1\145\1\0\12\144"+
    "\1\0\1\144\1\0\17\144\2\0\3\145\1\147\34\0"+
    "\2\144\1\0\1\144\2\0\7\144\1\222\2\144\1\0"+
    "\1\144\1\0\17\144\22\0\1\223\47\0\1\224\24\0"+
    "\1\225\41\0\1\155\2\0\1\155\6\0\12\155\43\0"+
    "\1\226\1\0\2\157\1\0\1\157\1\0\14\157\1\0"+
    "\15\157\2\0\3\157\1\145\1\160\1\145\14\157\1\0"+
    "\15\157\2\0\3\157\1\145\1\160\1\145\1\161\13\157"+
    "\1\0\15\157\2\0\3\157\1\0\1\157\1\0\10\157"+
    "\1\227\3\157\1\0\15\157\2\0\1\157\37\0\1\230"+
    "\26\0\1\231\24\0\1\232\32\0\2\166\2\233\1\234"+
    "\34\166\40\0\1\235\7\0\1\236\34\0\2\172\2\237"+
    "\1\240\4\172\1\166\27\172\1\44\2\0\3\241\1\173"+
    "\34\0\2\175\1\233\1\242\1\234\1\166\33\175\1\52"+
    "\15\0\1\243\61\0\1\244\40\0\1\245\5\0\1\204"+
    "\1\166\2\233\1\234\1\166\33\204\1\104\7\0\1\246"+
    "\45\0\1\247\11\0\12\247\3\0\2\207\1\233\1\250"+
    "\1\234\2\207\1\166\3\207\1\166\4\207\1\166\1\207"+
    "\1\166\16\207\1\106\37\0\1\251\7\0\1\252\34\0"+
    "\2\214\1\233\1\253\1\234\1\166\33\214\1\127\2\0"+
    "\3\254\1\215\34\0\11\44\1\0\25\44\1\255\2\44"+
    "\2\0\3\256\1\217\34\0\2\220\1\233\1\257\1\234"+
    "\1\166\12\220\1\166\1\220\1\166\16\220\1\134\5\0"+
    "\1\260\34\0\2\222\1\233\1\261\1\234\1\166\12\222"+
    "\1\166\1\222\1\166\16\222\1\144\5\0\1\262\64\0"+
    "\1\263\24\0\1\264\11\0\12\264\3\0\2\227\1\233"+
    "\1\265\1\234\14\227\1\166\15\227\2\166\1\157\2\232"+
    "\2\266\1\267\34\232\3\0\1\233\50\0\1\270\67\0"+
    "\1\271\2\0\2\44\1\237\6\44\1\0\30\44\2\0"+
    "\3\241\70\0\1\200\6\0\2\246\2\272\1\273\34\246"+
    "\3\0\3\274\1\275\5\0\1\247\11\0\12\247\14\0"+
    "\1\276\32\0\3\254\35\0\11\44\1\277\30\44\2\0"+
    "\3\256\64\0\1\300\14\0\3\301\1\302\5\0\1\264"+
    "\11\0\12\264\5\0\1\266\41\0\3\303\1\270\45\0"+
    "\1\304\32\0\1\272\41\0\3\274\37\0\3\274\1\275"+
    "\36\0\3\305\1\276\51\0\1\306\26\0\3\301\37\0"+
    "\3\301\1\302\36\0\3\303\37\0\3\307\1\304\36\0"+
    "\3\305\53\0\1\310\25\0\3\307\51\0\1\311\1\0"+
    "\1\310\41\0\1\312\23\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[5304];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\20\0\1\1\13\0\1\11\4\1\1\11\10\1\1\11"+
    "\3\1\1\11\7\1\1\11\2\1\2\11\5\1\2\11"+
    "\13\1\2\11\3\1\2\11\14\1\1\11\12\1\1\11"+
    "\7\1\5\0\1\11\1\1\1\0\1\11\1\1\2\0"+
    "\1\1\3\11\1\1\2\0\1\1\1\11\2\0\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\3\0"+
    "\1\11\1\1\2\11\1\0\1\11\1\1\2\0\4\1"+
    "\1\11\1\0\1\11\2\0\1\1\1\0\1\11\5\1"+
    "\1\11\1\1\1\11\2\0\1\1\1\11\1\1\2\0"+
    "\1\11\2\1\2\0\1\11\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
        private boolean nameFlag = true;
        int nextState;
        public int matchTimes = 0;

        public _HttpLexer() {
          this((java.io.Reader)null);
        }

        private static String zzToPrintable(CharSequence str) {
          return zzToPrintable(str.toString());
        }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _HttpLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }

  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case IN_BODY: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [218] { yypushback(yylength()); yybegin(YYINITIAL); return detectBodyType(this); }");
              yypushback(yylength()); yybegin(YYINITIAL); return detectBodyType(this);
            }  // fall though
            case 203: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [202] { yybegin(IN_HEADER_FIELD_VALUE); return FIELD_VALUE; }");
            { yybegin(IN_HEADER_FIELD_VALUE); return FIELD_VALUE;
            }
          // fall through
          case 64: break;
          case 2:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [256] { return BAD_CHARACTER; }");
            { return BAD_CHARACTER;
            }
          // fall through
          case 65: break;
          case 3:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [73] { return WHITE_SPACE; }");
            { return WHITE_SPACE;
            }
          // fall through
          case 66: break;
          case 4:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [71] { nameFlag = true; yybegin(IN_GLOBAL_VARIABLE); return AT; }");
            { nameFlag = true; yybegin(IN_GLOBAL_VARIABLE); return AT;
            }
          // fall through
          case 67: break;
          case 5:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [72] { yybegin(IN_FIRST_LINE); return REQUEST_METHOD; }");
            { yybegin(IN_FIRST_LINE); return REQUEST_METHOD;
            }
          // fall through
          case 68: break;
          case 6:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [78] {  }");
            { 
            }
          // fall through
          case 69: break;
          case 7:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [85] { yybegin(YYINITIAL); return WHITE_SPACE; }");
            { yybegin(YYINITIAL); return WHITE_SPACE;
            }
          // fall through
          case 70: break;
          case 8:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [121] { if(nameFlag) return DIRECTION_NAME_PART; else return DIRECTION_VALUE_PART; }");
            { if(nameFlag) return DIRECTION_NAME_PART; else return DIRECTION_VALUE_PART;
            }
          // fall through
          case 71: break;
          case 9:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [122] { nameFlag = false; return WHITE_SPACE; }");
            { nameFlag = false; return WHITE_SPACE;
            }
          // fall through
          case 72: break;
          case 10:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [131] { yybegin(IN_HEADER); return WHITE_SPACE; }");
            { yybegin(IN_HEADER); return WHITE_SPACE;
            }
          // fall through
          case 73: break;
          case 11:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [141] { yybegin(IN_VERSION); return WHITE_SPACE; }");
            { yybegin(IN_VERSION); return WHITE_SPACE;
            }
          // fall through
          case 74: break;
          case 12:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [138] { yybegin(IN_FRAGMENT); return HASH; }");
            { yybegin(IN_FRAGMENT); return HASH;
            }
          // fall through
          case 75: break;
          case 13:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [140] { return HOST_VALUE; }");
            { return HOST_VALUE;
            }
          // fall through
          case 76: break;
          case 14:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [136] { yybegin(IN_PATH); return SLASH; }");
            { yybegin(IN_PATH); return SLASH;
            }
          // fall through
          case 77: break;
          case 15:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [135] { yybegin(IN_PORT); return COLON; }");
            { yybegin(IN_PORT); return COLON;
            }
          // fall through
          case 78: break;
          case 16:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [137] { nameFlag = true; yybegin(IN_QUERY); return QUESTION; }");
            { nameFlag = true; yybegin(IN_QUERY); return QUESTION;
            }
          // fall through
          case 79: break;
          case 17:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [146] { yybegin(IN_PATH); return PORT_SEGMENT; }");
            { yybegin(IN_PATH); return PORT_SEGMENT;
            }
          // fall through
          case 80: break;
          case 18:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [153] { return SEGMENT; }");
            { return SEGMENT;
            }
          // fall through
          case 81: break;
          case 19:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [152] { return SLASH; }");
            { return SLASH;
            }
          // fall through
          case 82: break;
          case 20:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [165] { if(nameFlag) return QUERY_NAME; else return QUERY_VALUE; }");
            { if(nameFlag) return QUERY_NAME; else return QUERY_VALUE;
            }
          // fall through
          case 83: break;
          case 21:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [162] { nameFlag = true; return AND; }");
            { nameFlag = true; return AND;
            }
          // fall through
          case 84: break;
          case 22:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [163] { nameFlag = false; return EQUALS; }");
            { nameFlag = false; return EQUALS;
            }
          // fall through
          case 85: break;
          case 23:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [172] { return FRAGMENT_PART; }");
            { return FRAGMENT_PART;
            }
          // fall through
          case 86: break;
          case 24:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [207] { matchTimes++; }");
            { matchTimes++;
            }
          // fall through
          case 87: break;
          case 25:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [184] { yypushback(yylength()); yybegin(IN_HEADER_FIELD_NAME); }");
            { yypushback(yylength()); yybegin(IN_HEADER_FIELD_NAME);
            }
          // fall through
          case 88: break;
          case 26:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [185] { yybegin(IN_BODY); return WHITE_SPACE; }");
            { yybegin(IN_BODY); return WHITE_SPACE;
            }
          // fall through
          case 89: break;
          case 27:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [189] { return FIELD_NAME; }");
            { return FIELD_NAME;
            }
          // fall through
          case 90: break;
          case 28:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [191] { yybegin(IN_HEADER_FIELD_VALUE); return COLON; }");
            { yybegin(IN_HEADER_FIELD_VALUE); return COLON;
            }
          // fall through
          case 91: break;
          case 29:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [197] { yypushback(yylength()); yybegin(IN_HEADER_FIELD_VALUE_NO_SPACE); }");
            { yypushback(yylength()); yybegin(IN_HEADER_FIELD_VALUE_NO_SPACE);
            }
          // fall through
          case 92: break;
          case 30:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [222] { return INPUT_FILE_PATH_PART; }");
            { return INPUT_FILE_PATH_PART;
            }
          // fall through
          case 93: break;
          case 31:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [246] { yypushback(yylength()); yybegin(YYINITIAL); }");
            { yypushback(yylength()); yybegin(YYINITIAL);
            }
          // fall through
          case 94: break;
          case 32:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [251] { return OUTPUT_FILE_PATH_PART; }");
            { return OUTPUT_FILE_PATH_PART;
            }
          // fall through
          case 95: break;
          case 33:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [98] { yybegin(IN_DINAMIC_VARIABLE); return DOLLAR; }");
            { yybegin(IN_DINAMIC_VARIABLE); return DOLLAR;
            }
          // fall through
          case 96: break;
          case 34:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [97] { return IDENTIFIER; }");
            { return IDENTIFIER;
            }
          // fall through
          case 97: break;
          case 35:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [89] { if(nameFlag) return GLOBAL_NAME; else return GLOBAL_VALUE; }");
            { if(nameFlag) return GLOBAL_NAME; else return GLOBAL_VALUE;
            }
          // fall through
          case 98: break;
          case 36:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [77] { yypushback(yylength()); yybegin(IN_GLOBAL_SCRIPT_END); return SCRIPT_BODY_PAET; }");
            { yypushback(yylength()); yybegin(IN_GLOBAL_SCRIPT_END); return SCRIPT_BODY_PAET;
            }
          // fall through
          case 99: break;
          case 37:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [110] { yypushback(yylength()); yybegin(IN_PRE_SCRIPT_END); return SCRIPT_BODY_PAET; }");
            { yypushback(yylength()); yybegin(IN_PRE_SCRIPT_END); return SCRIPT_BODY_PAET;
            }
          // fall through
          case 100: break;
          case 38:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [127] { return SCHEMA_PART; }");
            { return SCHEMA_PART;
            }
          // fall through
          case 101: break;
          case 39:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [129] { nextState = IN_HOST; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE; }");
            { nextState = IN_HOST; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE;
            }
          // fall through
          case 102: break;
          case 40:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [154] { nextState = IN_PATH; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE; }");
            { nextState = IN_PATH; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE;
            }
          // fall through
          case 103: break;
          case 41:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [164] { nextState = IN_QUERY; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE; }");
            { nextState = IN_QUERY; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE;
            }
          // fall through
          case 104: break;
          case 42:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [213] { yybegin(IN_INPUT_FILE_PATH); return INPUT_SIGN; }");
            { yybegin(IN_INPUT_FILE_PATH); return INPUT_SIGN;
            }
          // fall through
          case 105: break;
          case 43:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [195] { nextState = IN_HEADER_FIELD_VALUE; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE; }");
            { nextState = IN_HEADER_FIELD_VALUE; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE;
            }
          // fall through
          case 106: break;
          case 44:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [100] { yybegin(nextState); return END_VARIABLE_BRACE; }");
            { yybegin(nextState); return END_VARIABLE_BRACE;
            }
          // fall through
          case 107: break;
          case 45:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [91] { nextState = IN_GLOBAL_VARIABLE; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE; }");
            { nextState = IN_GLOBAL_VARIABLE; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE;
            }
          // fall through
          case 108: break;
          case 46:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [68] { nameFlag = true; yybegin(IN_DIRECTION_COMMENT); return DIRECTION_COMMENT_START; }");
            { nameFlag = true; yybegin(IN_DIRECTION_COMMENT); return DIRECTION_COMMENT_START;
            }
          // fall through
          case 109: break;
          case 47:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [64] { yypushback(1); return LINE_COMMENT; }");
            { yypushback(1); return LINE_COMMENT;
            }
          // fall through
          case 110: break;
          case 48:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [84] { yybegin(YYINITIAL); return END_SCRIPT_BRACE; }");
            { yybegin(YYINITIAL); return END_SCRIPT_BRACE;
            }
          // fall through
          case 111: break;
          case 49:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [128] { yybegin(IN_HOST); return SCHEMA_SEPARATE; }");
            { yybegin(IN_HOST); return SCHEMA_SEPARATE;
            }
          // fall through
          case 112: break;
          case 50:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [214] { yypushback(yylength()); yybegin(IN_OUTPUT_FILE_PATH); return detectBodyType(this); }");
            { yypushback(yylength()); yybegin(IN_OUTPUT_FILE_PATH); return detectBodyType(this);
            }
          // fall through
          case 113: break;
          case 51:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [229] { yypushback(yylength()); yybegin(IN_POST_SCRIPT_END); return SCRIPT_BODY_PAET; }");
            { yypushback(yylength()); yybegin(IN_POST_SCRIPT_END); return SCRIPT_BODY_PAET;
            }
          // fall through
          case 114: break;
          case 52:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [236] { yybegin(IN_OUTPUT_FILE); return END_SCRIPT_BRACE; }");
            { yybegin(IN_OUTPUT_FILE); return END_SCRIPT_BRACE;
            }
          // fall through
          case 115: break;
          case 53:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [244] { yybegin(IN_OUTPUT_FILE_PATH); return OUTPUT_FILE_SIGN; }");
            { yybegin(IN_OUTPUT_FILE_PATH); return OUTPUT_FILE_SIGN;
            }
          // fall through
          case 116: break;
          case 54:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [250] { return OUTPUT_FILE_SIGN; }");
            { return OUTPUT_FILE_SIGN;
            }
          // fall through
          case 117: break;
          case 55:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [67] { return REQUEST_COMMENT; }");
            { return REQUEST_COMMENT;
            }
          // fall through
          case 118: break;
          case 56:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [217] { yypushback(yylength()); yybegin(YYINITIAL); return detectBodyType(this); }");
            { yypushback(yylength()); yybegin(YYINITIAL); return detectBodyType(this);
            }
          // fall through
          case 119: break;
          case 57:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [216] { yypushback(yylength()); yybegin(IN_MULTIPART); return detectBodyType(this); }");
            { yypushback(yylength()); yybegin(IN_MULTIPART); return detectBodyType(this);
            }
          // fall through
          case 120: break;
          case 58:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [228] { return OUT_START_SCRIPT_BRACE; }");
            { return OUT_START_SCRIPT_BRACE;
            }
          // fall through
          case 121: break;
          case 59:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [240] { yybegin(detectState(yytext())); return MESSAGE_BOUNDARY; }");
            { yybegin(detectState(yytext())); return MESSAGE_BOUNDARY;
            }
          // fall through
          case 122: break;
          case 60:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [70] { yybegin(IN_PRE_SCRIPT); return IN_START_SCRIPT_BRACE; }");
            { yybegin(IN_PRE_SCRIPT); return IN_START_SCRIPT_BRACE;
            }
          // fall through
          case 123: break;
          case 61:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [215] { yypushback(yylength()); yybegin(IN_POST_SCRIPT); return detectBodyType(this); }");
            { yypushback(yylength()); yybegin(IN_POST_SCRIPT); return detectBodyType(this);
            }
          // fall through
          case 124: break;
          case 62:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [69] { yybegin(IN_GLOBAL_SCRIPT); return GLOBAL_START_SCRIPT_BRACE; }");
            { yybegin(IN_GLOBAL_SCRIPT); return GLOBAL_START_SCRIPT_BRACE;
            }
          // fall through
          case 125: break;
          case 63:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [178] { return HTTP_VERSION; }");
            { return HTTP_VERSION;
            }
          // fall through
          case 126: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java _HttpLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        _HttpLexer scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new _HttpLexer(reader);
          do {
            System.out.println(scanner.advance());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
