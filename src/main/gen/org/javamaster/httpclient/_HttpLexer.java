// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _HttpLexer.flex

package org.javamaster.httpclient;

import com.intellij.psi.tree.IElementType;
import static org.javamaster.httpclient.utils.LexerUtils.*;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.javamaster.httpclient.psi.HttpTypes.*;



public class _HttpLexer implements com.intellij.lexer.FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_GLOBAL_SCRIPT = 2;
  public static final int IN_GLOBAL_SCRIPT_END = 4;
  public static final int IN_PRE_SCRIPT = 6;
  public static final int IN_PRE_SCRIPT_END = 8;
  public static final int IN_DIRECTION_COMMENT = 10;
  public static final int IN_FIRST_LINE = 12;
  public static final int IN_HOST = 14;
  public static final int IN_PORT = 16;
  public static final int IN_PATH = 18;
  public static final int IN_QUERY = 20;
  public static final int IN_FRAGMENT = 22;
  public static final int IN_BODY = 24;
  public static final int IN_HEADER = 26;
  public static final int IN_HEADER_FIELD_NAME = 28;
  public static final int IN_HEADER_FIELD_VALUE = 30;
  public static final int IN_HEADER_FIELD_VALUE_NO_SPACE = 32;
  public static final int IN_POST_SCRIPT = 34;
  public static final int IN_POST_SCRIPT_END = 36;
  public static final int IN_RES_SCRIPT_BODY_PAET = 38;
  public static final int IN_INPUT_FILE_PATH = 40;
  public static final int IN_OUTPUT_FILE = 42;
  public static final int IN_OUTPUT_FILE_PATH = 44;
  public static final int IN_VERSION = 46;
  public static final int IN_MULTIPART = 48;
  public static final int IN_VARIABLE = 50;
  public static final int IN_DINAMIC_VARIABLE = 52;
  public static final int IN_GLOBAL_VARIABLE = 54;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\6"+
    "\1\0\1\7\1\10\1\11\1\12\6\0\1\13\1\14"+
    "\1\15\12\16\1\17\1\0\1\20\1\21\1\22\1\23"+
    "\1\24\7\25\1\26\7\25\1\27\3\25\1\30\6\25"+
    "\4\0\1\31\1\0\1\32\1\33\1\32\1\34\3\32"+
    "\1\35\6\32\1\36\1\37\2\32\1\40\1\41\1\42"+
    "\1\32\1\43\3\32\1\44\1\0\1\45\7\0\1\3"+
    "\32\0\1\1\u01df\0\1\1\177\0\13\1\35\0\2\3"+
    "\5\0\1\1\57\0\1\1\240\0\1\1\377\0\u0100\46";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\20\0\1\1\13\0\1\2\1\3\3\2\1\4\1\5"+
    "\3\6\1\7\1\2\1\6\1\10\2\7\1\11\1\10"+
    "\2\12\1\3\5\2\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\2\1\24\1\25\1\26"+
    "\1\2\2\27\4\30\1\31\3\30\1\32\2\33\1\32"+
    "\1\34\1\35\3\36\2\1\2\6\1\2\1\37\1\33"+
    "\1\37\1\3\1\37\3\40\1\41\1\7\1\41\1\3"+
    "\1\41\3\2\1\42\1\43\1\2\4\44\1\2\5\0"+
    "\1\45\1\6\1\0\1\46\1\10\3\0\1\47\1\50"+
    "\1\51\1\52\1\27\2\0\1\30\1\53\2\0\1\54"+
    "\1\1\1\0\1\6\1\0\1\37\1\0\1\41\3\0"+
    "\1\55\1\44\1\56\1\57\1\0\2\60\2\0\2\60"+
    "\1\61\1\60\1\62\2\0\1\47\2\0\1\60\1\0"+
    "\1\63\1\60\1\64\1\6\1\65\1\60\1\66\1\60"+
    "\1\67\2\0\1\60\2\70\3\0\2\71\1\72\2\0"+
    "\1\73\1\0\1\74\1\0\1\75\1\0\1\76\1\0"+
    "\1\77\2\0\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\u0111"+
    "\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222\0\u0249"+
    "\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333\0\u035a\0\u0381"+
    "\0\u03a8\0\u03cf\0\u03f6\0\u041d\0\u0444\0\u046b\0\u0492\0\u04b9"+
    "\0\u04e0\0\u0444\0\u0507\0\u052e\0\u0555\0\u057c\0\u05a3\0\u05ca"+
    "\0\u05f1\0\u0618\0\u0444\0\u063f\0\u0666\0\u068d\0\u0444\0\u06b4"+
    "\0\u06db\0\u0702\0\u0729\0\u0750\0\u0777\0\u079e\0\u07c5\0\u0444"+
    "\0\u07ec\0\u04b9\0\u0444\0\u0444\0\u0813\0\u083a\0\u04b9\0\u0861"+
    "\0\u0888\0\u0444\0\u0444\0\u08af\0\u08d6\0\u08fd\0\u0924\0\u094b"+
    "\0\u0972\0\u0999\0\u09c0\0\u09e7\0\u0a0e\0\u0a35\0\u0444\0\u0444"+
    "\0\u0a5c\0\u04b9\0\u0a83\0\u0444\0\u0444\0\u04b9\0\u0aaa\0\u0ad1"+
    "\0\u0af8\0\u0b1f\0\u0b46\0\u0b6d\0\u0b94\0\u0bbb\0\u0be2\0\u0c09"+
    "\0\u0c30\0\u0444\0\u04b9\0\u0c57\0\u0c7e\0\u0ca5\0\u0ccc\0\u0cf3"+
    "\0\u0d1a\0\u0d41\0\u0d68\0\u0d8f\0\u0444\0\u0db6\0\u0ddd\0\u0e04"+
    "\0\u0e2b\0\u0e52\0\u0e79\0\u0ea0\0\u0ec7\0\u0eee\0\u0f15\0\u0f3c"+
    "\0\u0f63\0\u0444\0\u0f8a\0\u0fb1\0\u0444\0\u0fd8\0\u0fff\0\u1026"+
    "\0\u104d\0\u1074\0\u0444\0\u0444\0\u0444\0\u109b\0\u10c2\0\u10e9"+
    "\0\u1110\0\u0444\0\u1137\0\u115e\0\u0444\0\u1185\0\u11ac\0\u11d3"+
    "\0\u11fa\0\u1221\0\u1248\0\u126f\0\u1296\0\u12bd\0\u12e4\0\u0444"+
    "\0\u130b\0\u0444\0\u0444\0\u1332\0\u0444\0\u1359\0\u1380\0\u13a7"+
    "\0\u052e\0\u13ce\0\u13f5\0\u0618\0\u0444\0\u141c\0\u1443\0\u0444"+
    "\0\u146a\0\u1491\0\u0924\0\u14b8\0\u0444\0\u0ad1\0\u14df\0\u1506"+
    "\0\u152d\0\u0b94\0\u0444\0\u0c7e\0\u0444\0\u1554\0\u157b\0\u0e04"+
    "\0\u0444\0\u15a2\0\u15c9\0\u15f0\0\u1617\0\u0444\0\u163e\0\u1665"+
    "\0\u168c\0\u16b3\0\u0444\0\u16da\0\u1701\0\u1728\0\u174f\0\u1776"+
    "\0\u179d\0\u17c4\0\u17eb\0\u1812\0\u1839\0\u1839";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\35\5\36\1\35\1\37\5\35\1\40\2\35\1\41"+
    "\3\35\1\42\4\43\16\35\11\44\1\45\3\44\1\46"+
    "\31\44\1\35\5\47\3\35\1\50\3\35\1\40\31\35"+
    "\11\44\1\51\3\44\1\46\31\44\11\35\1\50\3\35"+
    "\1\40\31\35\2\52\1\53\1\52\1\54\1\55\7\52"+
    "\1\56\31\52\2\35\2\57\1\60\1\61\7\35\1\40"+
    "\1\35\1\62\14\35\1\63\1\64\5\35\1\65\1\66"+
    "\4\35\2\57\1\60\1\67\1\35\1\70\3\35\2\71"+
    "\1\72\1\71\1\73\3\35\1\74\1\35\4\71\1\35"+
    "\12\71\1\66\4\35\2\57\1\60\1\67\7\35\1\40"+
    "\1\75\30\35\1\76\1\35\2\57\1\60\1\67\1\76"+
    "\1\70\5\76\1\77\5\76\1\74\20\76\1\100\2\76"+
    "\1\101\1\35\2\57\1\60\1\67\1\101\1\70\2\101"+
    "\1\102\2\101\1\40\3\101\1\103\22\101\1\104\2\101"+
    "\1\105\1\35\2\57\1\60\1\67\7\105\1\106\31\105"+
    "\1\107\1\110\1\111\1\110\1\111\1\110\1\107\1\112"+
    "\3\107\1\113\1\107\1\114\2\107\1\115\1\107\1\116"+
    "\24\107\2\117\1\120\1\117\1\121\10\117\1\122\31\117"+
    "\5\35\1\61\5\35\1\123\1\35\1\40\1\123\1\124"+
    "\5\35\4\123\1\35\12\123\3\35\2\125\1\57\1\125"+
    "\1\60\1\61\7\125\1\126\26\125\1\127\2\125\2\130"+
    "\1\35\1\130\1\35\1\61\7\130\1\131\31\130\11\44"+
    "\1\132\3\44\1\46\4\44\1\133\24\44\11\35\1\134"+
    "\3\35\1\40\46\35\1\40\31\35\2\135\1\136\1\137"+
    "\1\136\1\140\7\135\1\141\2\135\1\35\1\135\1\35"+
    "\24\135\1\142\5\47\7\142\1\143\4\142\1\144\24\142"+
    "\2\145\1\146\1\147\1\146\1\150\7\145\1\151\2\145"+
    "\1\35\1\145\1\152\24\145\2\35\2\57\1\60\1\61"+
    "\7\35\1\40\10\35\1\153\33\35\1\154\1\35\1\40"+
    "\36\35\1\61\2\35\1\155\2\35\1\156\1\35\1\40"+
    "\1\156\6\35\17\156\1\35\1\157\6\35\1\61\5\35"+
    "\1\156\1\35\1\40\1\156\6\35\17\156\1\35\1\157"+
    "\1\35\2\160\1\146\1\161\1\146\1\162\7\160\1\163"+
    "\3\160\1\103\22\160\1\164\1\35\1\160\50\0\5\36"+
    "\46\0\1\165\1\0\1\166\54\0\1\167\36\0\1\170"+
    "\1\171\65\0\4\43\16\0\11\44\1\0\35\44\45\0"+
    "\1\172\1\0\11\44\1\0\3\44\1\173\31\44\1\0"+
    "\5\47\106\0\1\174\46\0\1\175\1\0\2\52\1\0"+
    "\1\52\2\0\41\52\2\0\1\53\51\0\1\55\41\0"+
    "\2\52\1\0\1\52\2\0\7\52\1\176\31\52\2\0"+
    "\1\57\51\0\1\61\56\0\1\177\73\0\1\200\45\0"+
    "\1\201\45\0\1\202\52\0\1\203\7\0\1\67\54\0"+
    "\2\71\1\0\1\71\6\0\4\71\1\0\12\71\21\0"+
    "\1\75\30\0\1\76\5\0\1\76\1\0\5\76\1\0"+
    "\5\76\1\0\20\76\1\0\2\76\44\0\1\204\2\0"+
    "\1\101\5\0\1\101\1\0\2\101\1\0\2\101\1\0"+
    "\3\101\1\0\22\101\1\0\2\101\44\0\1\205\2\0"+
    "\1\105\5\0\42\105\5\0\7\105\1\206\31\105\2\107"+
    "\1\0\1\107\1\0\2\107\1\0\3\107\1\0\4\107"+
    "\1\0\1\107\1\0\25\107\1\110\1\111\1\110\1\111"+
    "\1\110\1\107\1\0\3\107\1\0\4\107\1\0\1\107"+
    "\1\0\24\107\1\0\5\111\50\0\1\207\52\0\1\210"+
    "\33\0\2\107\1\0\1\107\1\0\2\107\1\0\3\107"+
    "\1\0\1\107\1\211\2\107\1\0\1\107\1\0\24\107"+
    "\5\0\1\212\46\0\1\213\14\0\1\214\26\0\1\120"+
    "\57\0\1\123\2\0\1\123\6\0\4\123\1\0\12\123"+
    "\47\0\1\215\2\0\2\130\1\0\1\130\2\0\43\130"+
    "\1\0\1\130\2\0\7\130\1\216\31\130\45\0\1\217"+
    "\1\0\5\44\1\220\3\44\1\0\35\44\45\0\1\221"+
    "\1\0\2\135\1\0\1\135\2\0\12\135\1\0\1\135"+
    "\1\0\24\135\2\0\3\136\42\0\2\135\1\136\1\137"+
    "\1\136\1\0\12\135\1\0\1\135\1\0\24\135\2\0"+
    "\3\136\1\140\41\0\2\135\1\0\1\135\2\0\7\135"+
    "\1\222\2\135\1\0\1\135\1\0\24\135\22\0\1\223"+
    "\24\0\2\145\1\0\1\145\2\0\12\145\1\0\1\145"+
    "\1\0\24\145\2\0\3\146\42\0\2\145\1\146\1\147"+
    "\1\146\1\0\12\145\1\0\1\145\1\0\24\145\2\0"+
    "\3\146\1\150\41\0\2\145\1\0\1\145\2\0\7\145"+
    "\1\224\2\145\1\0\1\145\1\0\24\145\22\0\1\225"+
    "\54\0\1\226\31\0\1\227\46\0\1\156\2\0\1\156"+
    "\6\0\17\156\50\0\1\230\1\0\2\160\1\0\1\160"+
    "\1\0\14\160\1\0\22\160\2\0\3\160\1\146\1\161"+
    "\1\146\14\160\1\0\22\160\2\0\3\160\1\146\1\161"+
    "\1\146\1\162\13\160\1\0\22\160\2\0\3\160\1\0"+
    "\1\160\1\0\10\160\1\231\3\160\1\0\22\160\2\0"+
    "\1\160\44\0\1\232\26\0\1\233\31\0\1\234\37\0"+
    "\2\167\2\235\1\236\41\167\45\0\1\237\7\0\1\240"+
    "\41\0\2\173\2\241\1\242\4\173\1\167\34\173\1\44"+
    "\2\0\3\243\1\174\41\0\2\176\1\235\1\244\1\236"+
    "\1\167\40\176\1\52\15\0\1\245\64\0\1\246\54\0"+
    "\1\247\45\0\1\250\6\0\1\206\1\167\2\235\1\236"+
    "\1\167\40\206\1\105\7\0\1\251\52\0\1\252\11\0"+
    "\4\252\1\0\12\252\3\0\2\211\1\235\1\253\1\236"+
    "\2\211\1\167\3\211\1\167\4\211\1\167\1\211\1\167"+
    "\23\211\1\107\44\0\1\254\7\0\1\255\41\0\2\216"+
    "\1\235\1\256\1\236\1\167\40\216\1\130\2\0\3\257"+
    "\1\217\41\0\11\44\1\0\32\44\1\260\2\44\2\0"+
    "\3\261\1\221\41\0\2\222\1\235\1\262\1\236\1\167"+
    "\12\222\1\167\1\222\1\167\23\222\1\135\5\0\1\263"+
    "\41\0\2\224\1\235\1\264\1\236\1\167\12\224\1\167"+
    "\1\224\1\167\23\224\1\145\5\0\1\265\71\0\1\266"+
    "\31\0\1\267\11\0\4\267\1\0\12\267\3\0\2\231"+
    "\1\235\1\270\1\236\14\231\1\167\22\231\2\167\1\160"+
    "\2\234\2\271\1\272\41\234\3\0\1\235\55\0\1\273"+
    "\101\0\1\274\2\0\2\44\1\241\6\44\1\0\35\44"+
    "\2\0\3\243\75\0\1\275\52\0\1\202\7\0\2\251"+
    "\2\276\1\277\41\251\3\0\3\300\1\301\5\0\1\252"+
    "\11\0\4\252\1\0\12\252\14\0\1\302\37\0\3\257"+
    "\42\0\11\44\1\303\35\44\2\0\3\261\71\0\1\304"+
    "\21\0\3\305\1\306\5\0\1\267\11\0\4\267\1\0"+
    "\12\267\5\0\1\271\46\0\3\307\1\273\52\0\1\310"+
    "\73\0\1\250\12\0\1\276\46\0\3\300\44\0\3\300"+
    "\1\301\43\0\3\311\1\302\56\0\1\312\33\0\3\305"+
    "\44\0\3\305\1\306\43\0\3\307\44\0\3\313\1\310"+
    "\43\0\3\311\60\0\1\314\32\0\3\313\56\0\1\315"+
    "\1\0\1\314\46\0\1\316\30\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6240];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\20\0\1\1\13\0\1\11\4\1\1\11\10\1\1\11"+
    "\3\1\1\11\10\1\1\11\2\1\2\11\5\1\2\11"+
    "\13\1\2\11\3\1\2\11\14\1\1\11\12\1\1\11"+
    "\7\1\5\0\1\11\1\1\1\0\1\11\1\1\3\0"+
    "\1\1\3\11\1\1\2\0\1\1\1\11\2\0\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\3\0"+
    "\1\11\1\1\2\11\1\0\1\11\1\1\2\0\4\1"+
    "\1\11\2\0\1\11\2\0\1\1\1\0\1\11\5\1"+
    "\1\11\1\1\1\11\2\0\1\1\1\11\1\1\3\0"+
    "\1\11\2\1\2\0\1\11\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
        private boolean nameFlag = true;
        int nextState;
        public int matchTimes = 0;

        public _HttpLexer() {
          this((java.io.Reader)null);
        }

        private static String zzToPrintable(CharSequence str) {
          return zzToPrintable(str.toString());
        }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _HttpLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }

  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case IN_BODY: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [219] { yypushback(yylength()); yybegin(YYINITIAL); return detectBodyType(this); }");
              yypushback(yylength()); yybegin(YYINITIAL); return detectBodyType(this);
            }  // fall though
            case 207: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [202] { yybegin(IN_HEADER_FIELD_VALUE); return FIELD_VALUE; }");
            { yybegin(IN_HEADER_FIELD_VALUE); return FIELD_VALUE;
            }
          // fall through
          case 65: break;
          case 2:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [257] { return BAD_CHARACTER; }");
            { return BAD_CHARACTER;
            }
          // fall through
          case 66: break;
          case 3:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [73] { return WHITE_SPACE; }");
            { return WHITE_SPACE;
            }
          // fall through
          case 67: break;
          case 4:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [71] { nameFlag = true; yybegin(IN_GLOBAL_VARIABLE); return AT; }");
            { nameFlag = true; yybegin(IN_GLOBAL_VARIABLE); return AT;
            }
          // fall through
          case 68: break;
          case 5:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [72] { yybegin(IN_FIRST_LINE); return REQUEST_METHOD; }");
            { yybegin(IN_FIRST_LINE); return REQUEST_METHOD;
            }
          // fall through
          case 69: break;
          case 6:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [78] {  }");
            { 
            }
          // fall through
          case 70: break;
          case 7:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [85] { yybegin(YYINITIAL); return WHITE_SPACE; }");
            { yybegin(YYINITIAL); return WHITE_SPACE;
            }
          // fall through
          case 71: break;
          case 8:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [121] { if(nameFlag) return DIRECTION_NAME_PART; else return DIRECTION_VALUE_PART; }");
            { if(nameFlag) return DIRECTION_NAME_PART; else return DIRECTION_VALUE_PART;
            }
          // fall through
          case 72: break;
          case 9:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [122] { nameFlag = false; return WHITE_SPACE; }");
            { nameFlag = false; return WHITE_SPACE;
            }
          // fall through
          case 73: break;
          case 10:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [131] { yybegin(IN_HEADER); return WHITE_SPACE; }");
            { yybegin(IN_HEADER); return WHITE_SPACE;
            }
          // fall through
          case 74: break;
          case 11:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [141] { yybegin(IN_VERSION); return WHITE_SPACE; }");
            { yybegin(IN_VERSION); return WHITE_SPACE;
            }
          // fall through
          case 75: break;
          case 12:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [138] { yybegin(IN_FRAGMENT); return HASH; }");
            { yybegin(IN_FRAGMENT); return HASH;
            }
          // fall through
          case 76: break;
          case 13:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [140] { return HOST_VALUE; }");
            { return HOST_VALUE;
            }
          // fall through
          case 77: break;
          case 14:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [136] { yybegin(IN_PATH); return SLASH; }");
            { yybegin(IN_PATH); return SLASH;
            }
          // fall through
          case 78: break;
          case 15:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [135] { yybegin(IN_PORT); return COLON; }");
            { yybegin(IN_PORT); return COLON;
            }
          // fall through
          case 79: break;
          case 16:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [137] { nameFlag = true; yybegin(IN_QUERY); return QUESTION; }");
            { nameFlag = true; yybegin(IN_QUERY); return QUESTION;
            }
          // fall through
          case 80: break;
          case 17:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [146] { yybegin(IN_PATH); return PORT_SEGMENT; }");
            { yybegin(IN_PATH); return PORT_SEGMENT;
            }
          // fall through
          case 81: break;
          case 18:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [153] { return SEGMENT; }");
            { return SEGMENT;
            }
          // fall through
          case 82: break;
          case 19:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [152] { return SLASH; }");
            { return SLASH;
            }
          // fall through
          case 83: break;
          case 20:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [165] { if(nameFlag) return QUERY_NAME; else return QUERY_VALUE; }");
            { if(nameFlag) return QUERY_NAME; else return QUERY_VALUE;
            }
          // fall through
          case 84: break;
          case 21:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [162] { nameFlag = true; return AND; }");
            { nameFlag = true; return AND;
            }
          // fall through
          case 85: break;
          case 22:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [163] { nameFlag = false; return EQUALS; }");
            { nameFlag = false; return EQUALS;
            }
          // fall through
          case 86: break;
          case 23:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [172] { return FRAGMENT_PART; }");
            { return FRAGMENT_PART;
            }
          // fall through
          case 87: break;
          case 24:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [208] { matchTimes++; }");
            { matchTimes++;
            }
          // fall through
          case 88: break;
          case 25:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [211] { matchTimes++; matchTimes++; }");
            { matchTimes++; matchTimes++;
            }
          // fall through
          case 89: break;
          case 26:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [184] { yypushback(yylength()); yybegin(IN_HEADER_FIELD_NAME); }");
            { yypushback(yylength()); yybegin(IN_HEADER_FIELD_NAME);
            }
          // fall through
          case 90: break;
          case 27:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [185] { yybegin(IN_BODY); return WHITE_SPACE; }");
            { yybegin(IN_BODY); return WHITE_SPACE;
            }
          // fall through
          case 91: break;
          case 28:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [189] { return FIELD_NAME; }");
            { return FIELD_NAME;
            }
          // fall through
          case 92: break;
          case 29:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [191] { yybegin(IN_HEADER_FIELD_VALUE); return COLON; }");
            { yybegin(IN_HEADER_FIELD_VALUE); return COLON;
            }
          // fall through
          case 93: break;
          case 30:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [197] { yypushback(yylength()); yybegin(IN_HEADER_FIELD_VALUE_NO_SPACE); }");
            { yypushback(yylength()); yybegin(IN_HEADER_FIELD_VALUE_NO_SPACE);
            }
          // fall through
          case 94: break;
          case 31:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [223] { return INPUT_FILE_PATH_PART; }");
            { return INPUT_FILE_PATH_PART;
            }
          // fall through
          case 95: break;
          case 32:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [247] { yypushback(yylength()); yybegin(YYINITIAL); }");
            { yypushback(yylength()); yybegin(YYINITIAL);
            }
          // fall through
          case 96: break;
          case 33:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [252] { return OUTPUT_FILE_PATH_PART; }");
            { return OUTPUT_FILE_PATH_PART;
            }
          // fall through
          case 97: break;
          case 34:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [98] { yybegin(IN_DINAMIC_VARIABLE); return DOLLAR; }");
            { yybegin(IN_DINAMIC_VARIABLE); return DOLLAR;
            }
          // fall through
          case 98: break;
          case 35:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [97] { return IDENTIFIER; }");
            { return IDENTIFIER;
            }
          // fall through
          case 99: break;
          case 36:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [89] { if(nameFlag) return GLOBAL_NAME; else return GLOBAL_VALUE; }");
            { if(nameFlag) return GLOBAL_NAME; else return GLOBAL_VALUE;
            }
          // fall through
          case 100: break;
          case 37:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [77] { yypushback(yylength()); yybegin(IN_GLOBAL_SCRIPT_END); return SCRIPT_BODY_PAET; }");
            { yypushback(yylength()); yybegin(IN_GLOBAL_SCRIPT_END); return SCRIPT_BODY_PAET;
            }
          // fall through
          case 101: break;
          case 38:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [110] { yypushback(yylength()); yybegin(IN_PRE_SCRIPT_END); return SCRIPT_BODY_PAET; }");
            { yypushback(yylength()); yybegin(IN_PRE_SCRIPT_END); return SCRIPT_BODY_PAET;
            }
          // fall through
          case 102: break;
          case 39:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [127] { return SCHEMA_PART; }");
            { return SCHEMA_PART;
            }
          // fall through
          case 103: break;
          case 40:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [129] { nextState = IN_HOST; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE; }");
            { nextState = IN_HOST; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE;
            }
          // fall through
          case 104: break;
          case 41:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [154] { nextState = IN_PATH; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE; }");
            { nextState = IN_PATH; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE;
            }
          // fall through
          case 105: break;
          case 42:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [164] { nextState = IN_QUERY; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE; }");
            { nextState = IN_QUERY; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE;
            }
          // fall through
          case 106: break;
          case 43:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [214] { yybegin(IN_INPUT_FILE_PATH); return INPUT_SIGN; }");
            { yybegin(IN_INPUT_FILE_PATH); return INPUT_SIGN;
            }
          // fall through
          case 107: break;
          case 44:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [195] { nextState = IN_HEADER_FIELD_VALUE; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE; }");
            { nextState = IN_HEADER_FIELD_VALUE; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE;
            }
          // fall through
          case 108: break;
          case 45:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [100] { yybegin(nextState); return END_VARIABLE_BRACE; }");
            { yybegin(nextState); return END_VARIABLE_BRACE;
            }
          // fall through
          case 109: break;
          case 46:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [91] { nextState = IN_GLOBAL_VARIABLE; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE; }");
            { nextState = IN_GLOBAL_VARIABLE; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE;
            }
          // fall through
          case 110: break;
          case 47:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [68] { nameFlag = true; yybegin(IN_DIRECTION_COMMENT); return DIRECTION_COMMENT_START; }");
            { nameFlag = true; yybegin(IN_DIRECTION_COMMENT); return DIRECTION_COMMENT_START;
            }
          // fall through
          case 111: break;
          case 48:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [64] { yypushback(1); return LINE_COMMENT; }");
            { yypushback(1); return LINE_COMMENT;
            }
          // fall through
          case 112: break;
          case 49:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [84] { yybegin(YYINITIAL); return END_SCRIPT_BRACE; }");
            { yybegin(YYINITIAL); return END_SCRIPT_BRACE;
            }
          // fall through
          case 113: break;
          case 50:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [128] { yybegin(IN_HOST); return SCHEMA_SEPARATE; }");
            { yybegin(IN_HOST); return SCHEMA_SEPARATE;
            }
          // fall through
          case 114: break;
          case 51:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [215] { yypushback(yylength()); yybegin(IN_OUTPUT_FILE_PATH); return detectBodyType(this); }");
            { yypushback(yylength()); yybegin(IN_OUTPUT_FILE_PATH); return detectBodyType(this);
            }
          // fall through
          case 115: break;
          case 52:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [230] { yypushback(yylength()); yybegin(IN_POST_SCRIPT_END); return SCRIPT_BODY_PAET; }");
            { yypushback(yylength()); yybegin(IN_POST_SCRIPT_END); return SCRIPT_BODY_PAET;
            }
          // fall through
          case 116: break;
          case 53:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [237] { yybegin(IN_OUTPUT_FILE); return END_SCRIPT_BRACE; }");
            { yybegin(IN_OUTPUT_FILE); return END_SCRIPT_BRACE;
            }
          // fall through
          case 117: break;
          case 54:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [245] { yybegin(IN_OUTPUT_FILE_PATH); return OUTPUT_FILE_SIGN; }");
            { yybegin(IN_OUTPUT_FILE_PATH); return OUTPUT_FILE_SIGN;
            }
          // fall through
          case 118: break;
          case 55:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [251] { return OUTPUT_FILE_SIGN; }");
            { return OUTPUT_FILE_SIGN;
            }
          // fall through
          case 119: break;
          case 56:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [67] { return REQUEST_COMMENT; }");
            { return REQUEST_COMMENT;
            }
          // fall through
          case 120: break;
          case 57:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [218] { yypushback(yylength()); yybegin(YYINITIAL); return detectBodyType(this); }");
            { yypushback(yylength()); yybegin(YYINITIAL); return detectBodyType(this);
            }
          // fall through
          case 121: break;
          case 58:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [217] { yypushback(yylength()); yybegin(IN_MULTIPART); return detectBodyType(this); }");
            { yypushback(yylength()); yybegin(IN_MULTIPART); return detectBodyType(this);
            }
          // fall through
          case 122: break;
          case 59:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [229] { return OUT_START_SCRIPT_BRACE; }");
            { return OUT_START_SCRIPT_BRACE;
            }
          // fall through
          case 123: break;
          case 60:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [241] { yybegin(detectState(yytext())); return MESSAGE_BOUNDARY; }");
            { yybegin(detectBoundaryState(yytext())); return MESSAGE_BOUNDARY;
            }
          // fall through
          case 124: break;
          case 61:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [70] { yybegin(IN_PRE_SCRIPT); return IN_START_SCRIPT_BRACE; }");
            { yybegin(IN_PRE_SCRIPT); return IN_START_SCRIPT_BRACE;
            }
          // fall through
          case 125: break;
          case 62:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [216] { yypushback(yylength()); yybegin(IN_POST_SCRIPT); return detectBodyType(this); }");
            { yypushback(yylength()); yybegin(IN_POST_SCRIPT); return detectBodyType(this);
            }
          // fall through
          case 126: break;
          case 63:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [69] { yybegin(IN_GLOBAL_SCRIPT); return GLOBAL_START_SCRIPT_BRACE; }");
            { yybegin(IN_GLOBAL_SCRIPT); return GLOBAL_START_SCRIPT_BRACE;
            }
          // fall through
          case 127: break;
          case 64:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [178] { return HTTP_VERSION; }");
            { return HTTP_VERSION;
            }
          // fall through
          case 128: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java _HttpLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        _HttpLexer scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new _HttpLexer(reader);
          do {
            System.out.println(scanner.advance());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
