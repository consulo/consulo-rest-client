// Introduce javascript library with use npm url, it will be download and cache.
// You can find the npm download url in package-lock.json
// 使用 npm 链接引入 js库, 将会被下载和缓存, npm 链接可以在 package-lock.json 文件中找到
# @require https://registry.npmmirror.com/moment/-/moment-2.30.1.tgz
# @require https://registry.npmmirror.com/lodash/-/lodash-4.17.21.tgz

// Global import local js file 全局导入本地 js 文件
# @import ./js/public.js

<! {%
    // Global js previous handler 全局前置处理器
    console.log("Call moment format:", moment().format())
    client.global.clearAll();
    client.global.set('globalName', 'jufeng98');
    request.variables.set('requestName', 'jufeng9878');

    // Set request header 设置请求头
    request.headers.set('My-Header', request.environment.get("token"));

    // Append request header 追加请求头
    request.headers.add('Set-Cookie', request.environment.get("token1"));
    request.headers.add('Set-Cookie', request.environment.get("token2"));

    const secret = "RHDcnjfmkES"
    const signSource = secret + request.body.string() + secret;
    // Use builtin CryptoJS object 使用内置的 CryptoJS 对象
    const sign = CryptoJS.MD5(signSource)
    request.variables.set('sign', sign);
    console.log("sign:", sign);

    const params = new URLSearchParams();
    params.append("name", "yu");
    console.log("query param:", params.toString());

    // Execute local js file 执行本地 js 文件
    const global = require('./js/myUtils.js');
    const res = global.MyUtils.isBlank('hello');
    client.log(`result: ${res}`);
%}

// Global variables
@tokenAdmin={{token}}
@name=jufeng

### use variable
< {%
    // pre-request handler 请求前置处理器
    request.variables.set('cnName', 'jufeng987878');
    console.log("Call lodash capitalize:", _.capitalize('FRED'))
%}
POST https://miao.baidu.com/abdr?a={{globalName}}&b={{requestName}}&sign={{sign}}
Content-Type: application/json
Admin-Token: {{tokenAdmin}}
Name: {{name}}
Cn-Name: {{cnName}}

{
    "desc": "hello"
}

> {%
    client.global.set("name", response.body.data.name);
    console.log("Call lodash capitalize:", _.capitalize('JACK'))
%}

>> result.html

### post js handler
GET https://miao.baidu.com/abdr

> {%
    client.test("Request executed successfully", () => {
        client.assert(response.status === 200, "Response status is not 200");
        client.log('content-type:' + response.headers['content-type'])

        const res = response.body.jsonPath.evaluate("$.code");
        console.log(res);

        const result = jsonPath(response.body, "$.code");
        console.log(result);
    })
%}

### Check response body
GET https://miao.baidu.com/abdr

> {%
    client.test("Headers option exists", () => {
        client.assert(response.body.hasOwnProperty("data"), "Cannot find 'data' option in response");
    })
%}

### Check Content-Type from headers
GET https://miao.baidu.com/abdr

> {%
    client.test("Content-Type is application/json", () => {
        const mimeType = response.headers.contentType.mimeType;
        client.assert(mimeType === "application/json", `Expected Content-Type is application/json, but actual is  ${mimeType}`);
    })
%}

### Operate xml
GET https://examples.http-client.intellij.net/xml

> {%
    const slide = response.body.getElementsByTagName("slide").item(0).textContent
    client.log("textContent:", slide)

    const title = response.body.xpath.evaluate("/slideshow/slide/title")
    console.log("xPath title:", title)

    const result = xpath(response.body, "/slideshow/slide/title")
    console.log("xPath result:", result)
%}