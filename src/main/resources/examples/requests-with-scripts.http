<! {%
    // 全局前置处理器
    client.global.clearAll();
    client.global.set('globalName', 'jufeng98');
    request.variables.set('requestName', 'jufeng9878');

    const secret = "RHDcnjfmkES"
    const signSource = secret + request.body.string() + secret;
    // 使用内置的 CryptoJS 对象
    const sign = CryptoJS.MD5(signSource)
    request.variables.set('sign', sign);
    console.log("sign:", sign);

    const params = new URLSearchParams();
    params.append("name", "yu");
    console.log("查询参数:", params.toString());

    // 执行自定义的 js 文件
    const global = require('./myUtils.js');
    const res = global.MyUtils.isBlank('hello');
    client.log(`结果:${res}`);
%}

// 全局变量
@tokenAdmin={{token}}
@name=jufeng

### 使用变量
< {%
    // 请求前置处理器
    request.variables.set('cnName', 'jufeng987878');
%}
POST https://miao.baidu.com/abdr?a={{globalName}}&b={{requestName}}&sign={{sign}}
Content-Type: application/json
Admin-Token: {{tokenAdmin}}
Name: {{name}}
Cn-Name: {{cnName}}

{
    "desc": "hello"
}

> {%
    client.global.set("my-temp-variable", "I will not deleted!");
    request.variables.set("my-temp-variable", "I will be deleted soon!");
%}

>> result.html

### 后置js处理器
GET https://miao.baidu.com/abdr

> {%
    client.test("Request executed successfully", () => {
        client.assert(response.status === 200, "Response status is not 200");
        client.log('content-type:' + response.headers['content-type'])

        const res = response.body.jsonPath.evaluate("$.code");
        console.log(res);

        const result = jsonPath(response.body, "$.code");
        console.log(result);
    })
%}

### 检查响应体
GET https://miao.baidu.com/abdr

> {%
    client.test("Headers option exists", () => {
        client.assert(response.body.hasOwnProperty("data"), "Cannot find 'data' option in response");
    })
%}

### 检查 Content-Type from headers
GET https://miao.baidu.com/abdr

> {%
    client.test("Content-Type is application/json", () => {
        const mimeType = response.headers.contentType.mimeType;
        client.assert(mimeType === "application/json", `Expected Content-Type is application/json, but actual is  ${mimeType}`);
    })
%}

### 操作xml
GET https://examples.http-client.intellij.net/xml

> {%
    const slide = response.body.getElementsByTagName("slide").item(0).textContent
    client.log("textContent:", slide)

    const title = response.body.xpath.evaluate("/slideshow/slide/title")
    console.log("xPath title:", title)

    const result = xpath(response.body, "/slideshow/slide/title")
    console.log("xPath result:", result)
%}