<idea-plugin>
    <id>org.javamaster.HttpRequest</id>
    <name>HttpRequest</name>
    <vendor email="375709770@qq.com" url="https://www.zhihu.com/people/liang-yu-dong-44">jufeng98</vendor>

    <description>
        <![CDATA[
            Provides the ability to edit and execute HTTP requests from the code editor.<br>
            <ul>
                <li>Support sending GET, POST and other requests</li>
                <li>Support sending WebSocket request</li>
                <li>Support sending Dubbo request</li>
                <li>Support Environment, build-in variable and build-in method</li>
                <li>Support jump to Spring Controller from url(Depend on Cool Request plugin)</li>
                <li>Support jump to Spring Controller bean field from json property(Depend on Cool Request plugin)</li>
                <li>Support JavaScript previous handler, post handler and global handler. JavaScript syntax highlighting depend on WebCalm plugin</li>
                <li>Support reading file content as http request body</li>
                <li>Support save http response body to file</li>
                <li>Support preview image</li>
            </ul>
            Getting Started:<br>
            <ol>
                <li>Create a file with an HTTP suffix</li>
                <li>Input gtr or ptr to trigger live templates and quickly create HTTP requests</li>
                <li>Click the run button on the left side of the file to sending request and view the response</li>
            </ol>
            提供从 IDEA Editor 编写和执行 HTTP 请求的能力：<br>
            <ul>
                <li>支持发起 GET、POST 等请求</li>
                <li>支持发起 WebSocket 请求</li>
                <li>支持发起 Dubbo 请求</li>
                <li>支持环境变量、内置变量和内置方法</li>
                <li>支持从 url 跳转到 SpringMVC Controller(依赖Cool Request插件)</li>
                <li>支持从 json 属性跳转到 Spring Bean 字段(依赖Cool Request插件)</li>
                <li>支持 JavaScript 语法的前置处理器、后置处理器和全局前置处理器，其中 JavaScript 语法高亮功能依赖 WebCalm 插件</li>
                <li>支持从文件读取内容作为请求体</li>
                <li>支持保存响应到文件</li>
                <li>支持预览图片</li>
            </ul>
            开始使用：<br>
            <ol>
                <li>创建一个 http 后缀的文件</li>
                <li>输入 gtr 或 ptr 等触发实时模板从而快速创建 http 请求</li>
                <li>点击文件左侧的运行按钮发起请求并查看响应</li>
            </ol>
        ]]>
    </description>

    <change-notes>
        <![CDATA[
            <ul>
                <li><b>2.5.0</b></li>
                <ul>
                    <li>提升内置方法的输入补全体验</li>
                    <li>允许请求名称为空</li>
                    <li>指定确切最低版本</li>
                    <li>Bug修复</li>
                </ul>
            </ul>
            <ul>
                <li><b>2.2.0</b></li>
                <ul>
                    <li>默认折叠Header</li>
                    <li>Bug修复</li>
                </ul>
            </ul>
            <ul>
                <li><b>2.1.0</b></li>
                <ul>
                    <li>改进http语法错误恢复能力</li>
                    <li>支持注释指令参数</li>
                    <li>Bug修复</li>
                </ul>
            </ul>
            <ul>
                <li><b>2.0.0</b></li>
                <ul>
                    <li>重构http语法解析逻辑，采用更科学的方式</li>
                    <li>更合理的窗口布局</li>
                    <li>支持 Dubbo 请求</li>
                    <li>Bug修复</li>
                </ul>
            </ul>
        ]]>
    </change-notes>

    <depends>com.intellij.java</depends>
    <depends>com.intellij.modules.json</depends>
    <depends>com.intellij.modules.platform</depends>
    <depends optional="true" config-file="httpclient-cool-request.xml">com.hxl.plugin.cool-request</depends>
    <depends optional="true" config-file="httpclient-web-calm.xml">ris58h.webcalm</depends>

    <projectListeners>
        <listener topic="com.intellij.openapi.fileEditor.FileEditorManagerListener"
                  class="org.javamaster.httpclient.listener.HttpEditorListener"/>
    </projectListeners>

    <extensions defaultExtensionNs="com.intellij">
        <notificationGroup id="HttpClient.STICKY_BALLOON"
                           isLogByDefault="true"
                           displayType="STICKY_BALLOON"/>

        <fileType
                name="HTTP"
                implementationClass="org.javamaster.httpclient.HttpFileType"
                fieldName="INSTANCE"
                language="http"
                extensions="http"/>
        <lang.parserDefinition
                language="http"
                implementationClass="org.javamaster.httpclient.parser.HttpParserDefinition"/>
        <lang.ast.factory language="http" implementationClass="org.javamaster.httpclient.HttpASTFactory"/>
        <editorHighlighterProvider filetype="HTTP"
                                   implementationClass="org.javamaster.httpclient.highlighting.HttpHighlighterProvider"/>
        <fileBasedIndex implementation="org.javamaster.httpclient.index.HttpEnvironmentIndex"/>
        <multiHostInjector
                implementation="org.javamaster.httpclient.inject.MessageBodyInjectionContributor"/>
        <runLineMarkerContributor language="http"
                                  implementationClass="org.javamaster.httpclient.gutter.HttpRunLineMarkerContributor"/>
        <psi.referenceContributor language="http"
                                  implementation="org.javamaster.httpclient.reference.HttpReferenceContributor"/>
        <lang.elementManipulator forClass="com.intellij.httpClient.http.request.psi.HttpFilePath"
                                 implementationClass="org.javamaster.httpclient.manipulator.HttpFilePathManipulator"/>
        <configurationType implementation="org.javamaster.httpclient.runconfig.HttpConfigurationType"/>
        <runDashboardDefaultTypesProvider
                implementation="org.javamaster.httpclient.dashboard.HttpDashboardDefaultTypesProvider"/>
        <runDashboardCustomizer implementation="org.javamaster.httpclient.dashboard.HttpRunDashboardCustomizer"
                                id="httpRunDashboardCustomizer"/>
        <executor implementation="org.javamaster.httpclient.dashboard.HttpExecutor" order="first" id="httpExecutor"/>
        <programRunner implementation="org.javamaster.httpclient.dashboard.HttpProgramRunner"/>
        <highlightErrorFilter implementation="org.javamaster.httpclient.suppress.MyHighlightErrorFilter"/>
        <lang.inspectionSuppressor language="JSON"
                                   implementationClass="org.javamaster.httpclient.suppress.JsonInspectionSuppressor"/>
        <gotoDeclarationHandler id="JsonValueGotoDeclarationHandler"
                                implementation="org.javamaster.httpclient.reference.JsonValueGotoDeclarationHandler"/>
        <completion.contributor language="JSON" id="HttpCompletionContributor" order="last"
                                implementationClass="org.javamaster.httpclient.completion.HttpJsonCompletionContributor"/>
        <completion.contributor language="http" id="HttpRequestCompletionContributor" order="last"
                                implementationClass="org.javamaster.httpclient.completion.HttpCompletionContributor"/>
        <typedHandler implementation="org.javamaster.httpclient.typeHandler.HttpTypedHandler"/>
        <braceMatcher filetype="http"
                      implementationClass="org.javamaster.httpclient.braceMatcher.HttpBraceMatcher"/>
        <lang.foldingBuilder language="http"
                             implementationClass="org.javamaster.httpclient.folding.HttpFoldingBuilder"/>
        <lang.psiStructureViewFactory language="http"
                                      implementationClass="org.javamaster.httpclient.structure.HttpRequestStructureViewFactory"/>
        <defaultLiveTemplates file="liveTemplates/request.xml"/>
        <liveTemplateContext contextId="REQUEST"
                             implementation="org.javamaster.httpclient.liveTemplates.HttpTemplateContextType"/>
        <multiHostInjector
                implementation="org.javamaster.httpclient.inject.ScriptBodyInjectionBackupContributor"/>
    </extensions>
</idea-plugin>